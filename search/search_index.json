{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Telemetrix User's Guide For The Raspberry Pi Pico W Telemetry is a system for collecting data on a remote device and then automatically transmitting the collected data back to local receiving equipment for processing. The Telemetrix Project for the Raspberry Pi Pico W does just that and more. With Telemetrix, you can do things such as establish a GPIO pin as a PWM output pin, and set its value to run a DC motor, or perhaps select the pin as a control pin for a NeoPixel strip or communicate with your favorite i2c device. All within a Python application. Telemetrix gives the appearance that the Pico W is being programmed , but in fact, the Pico is running a fixed application and is not programmed in the traditional sense. Instead, a Python application is written using a Traditional Python API or Python asyncio API. and communicates with the Pico W over WIFI. After setting a GPIO pin as a data input pin, Telemetrix automatically reports input data changes to the Python application using a callback mechanism, ensuring that the application receives the latest data changes quickly and that no data changes are lost. A Working Example Here is a Telemetrix example that monitors several digital input pins: import sys import time from telemetrix_rpi_pico_w import telemetrix_rpi_pico_w \"\"\" Monitor 4 digital input pins with pull-up enabled for each \"\"\" # Callback data indices # When the callback function is called, the client fills in # the data parameter. Data is a list of values, and the following are # indexes into the list to retrieve report information CB_PIN_MODE = 0 # The mode of the reporting pin (input, output, PWM, etc.) CB_PIN = 1 # The GPIO pin number associated with this report CB_VALUE = 2 # The data value reported CB_TIME = 3 # A time stamp when the data change occurred def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin mode, pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Report Type: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} ' f'Value: {data[CB_VALUE]} Time Stamp: {date}') board = telemetrix_rpi_pico_w.TelemetrixRpiPicoW() board.set_pin_mode_digital_input_pullup(12, the_callback) board.set_pin_mode_digital_input_pullup(13, the_callback) board.set_pin_mode_digital_input_pullup(14, the_callback) board.set_pin_mode_digital_input_pullup(15, the_callback) try: while True: time.sleep(.0001) except KeyboardInterrupt: board.shutdown() sys.exit(0) And here is some sample output: TelemetrixRpiPicoW: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. Retrieving Telemetrix4pico firmware ID... Telemetrix4pico firmware version: 1.0 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 13 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 14 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 15 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 13 Value: 0 Time Stamp: 2022-03-14 13:35:21 Report Type: 2 Pin: 13 Value: 1 Time Stamp: 2022-03-14 13:35:22 Report Type: 2 Pin: 14 Value: 0 Time Stamp: 2022-03-14 13:35:29 Report Type: 2 Pin: 14 Value: 1 Time Stamp: 2022-03-14 13:35:31 Report Type: 2 Pin: 15 Value: 0 Time Stamp: 2022-03-14 13:35:33 Report Type: 2 Pin: 15 Value: 1 Time Stamp: 2022-03-14 13:35:34 The Telemetrix Client/Server Model Telemetrix for the Raspberry Pi Pico W consists of two main components. The first component is a fixed resident Pico server, implemented using The arduino-pico library . Once the server is installed on the Pico, no additional code is generated or uploaded to the Pico. The second component is a Python client application, written using a telemetrix-rpi-pico-w Python API. WIFI is used to transport commands and responses between client and server. There are two Python client APIs from which to choose. The difference between the two is concurrency implementation. The telemetrix_rpi_pico_w API is implemented using Python threading, and the telemetrix_rpi_pico_w_aio API uses Python asyncio for concurrency. They both utilize the same server and support similar features. Summary Of Major Features Applications are programmed using conventional Python 3.7 or greater. All Data change events are reported asynchronously via user-registered callback functions. Each data change event is time-stamped. Online API Reference Documentation is provided: For the Threaded Python Client. For the Asyncio Python Client. A complete set of working examples is provided for both traditional Python and the asyncio version. Integrated debugging methods are included as part of the Pico Server SDK source code to aid in adding new features. Copyright (C) 2022 Alan Yorinks. All Rights Reserved. Last updated 21 September 2022","title":"Introduction"},{"location":"#a-working-example","text":"Here is a Telemetrix example that monitors several digital input pins: import sys import time from telemetrix_rpi_pico_w import telemetrix_rpi_pico_w \"\"\" Monitor 4 digital input pins with pull-up enabled for each \"\"\" # Callback data indices # When the callback function is called, the client fills in # the data parameter. Data is a list of values, and the following are # indexes into the list to retrieve report information CB_PIN_MODE = 0 # The mode of the reporting pin (input, output, PWM, etc.) CB_PIN = 1 # The GPIO pin number associated with this report CB_VALUE = 2 # The data value reported CB_TIME = 3 # A time stamp when the data change occurred def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin mode, pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Report Type: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} ' f'Value: {data[CB_VALUE]} Time Stamp: {date}') board = telemetrix_rpi_pico_w.TelemetrixRpiPicoW() board.set_pin_mode_digital_input_pullup(12, the_callback) board.set_pin_mode_digital_input_pullup(13, the_callback) board.set_pin_mode_digital_input_pullup(14, the_callback) board.set_pin_mode_digital_input_pullup(15, the_callback) try: while True: time.sleep(.0001) except KeyboardInterrupt: board.shutdown() sys.exit(0) And here is some sample output: TelemetrixRpiPicoW: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. Retrieving Telemetrix4pico firmware ID... Telemetrix4pico firmware version: 1.0 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 13 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 14 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 15 Value: 1 Time Stamp: 2022-03-14 13:34:52 Report Type: 2 Pin: 13 Value: 0 Time Stamp: 2022-03-14 13:35:21 Report Type: 2 Pin: 13 Value: 1 Time Stamp: 2022-03-14 13:35:22 Report Type: 2 Pin: 14 Value: 0 Time Stamp: 2022-03-14 13:35:29 Report Type: 2 Pin: 14 Value: 1 Time Stamp: 2022-03-14 13:35:31 Report Type: 2 Pin: 15 Value: 0 Time Stamp: 2022-03-14 13:35:33 Report Type: 2 Pin: 15 Value: 1 Time Stamp: 2022-03-14 13:35:34","title":"A Working Example"},{"location":"#the-telemetrix-clientserver-model","text":"Telemetrix for the Raspberry Pi Pico W consists of two main components. The first component is a fixed resident Pico server, implemented using The arduino-pico library . Once the server is installed on the Pico, no additional code is generated or uploaded to the Pico. The second component is a Python client application, written using a telemetrix-rpi-pico-w Python API. WIFI is used to transport commands and responses between client and server. There are two Python client APIs from which to choose. The difference between the two is concurrency implementation. The telemetrix_rpi_pico_w API is implemented using Python threading, and the telemetrix_rpi_pico_w_aio API uses Python asyncio for concurrency. They both utilize the same server and support similar features.","title":"The Telemetrix Client/Server Model"},{"location":"#summary-of-major-features","text":"Applications are programmed using conventional Python 3.7 or greater. All Data change events are reported asynchronously via user-registered callback functions. Each data change event is time-stamped. Online API Reference Documentation is provided: For the Threaded Python Client. For the Asyncio Python Client. A complete set of working examples is provided for both traditional Python and the asyncio version. Integrated debugging methods are included as part of the Pico Server SDK source code to aid in adding new features. Copyright (C) 2022 Alan Yorinks. All Rights Reserved. Last updated 21 September 2022","title":"Summary Of Major Features"},{"location":"about/","text":"REPORTING ISSUES If you wish to report an issue with this library, please use this link . For Telemetrix4RpiPicoW (the server), please use this link . When filing an issue, please provide: Any console output. A description of the issue. Sample code demonstrating the problem. For comments or questions, please use this link Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"About"},{"location":"about/#reporting-issues","text":"If you wish to report an issue with this library, please use this link . For Telemetrix4RpiPicoW (the server), please use this link . When filing an issue, please provide: Any console output. A description of the issue. Sample code demonstrating the problem. For comments or questions, please use this link Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"REPORTING ISSUES"},{"location":"about_the_apis/","text":"If you look at the Pico W pin-out diagram, you will see that a GPIO pin may be configured to operate in one of several operational modes. No matter the mode, when using Telemetrix, you must first explicitly set the mode by calling one of the set_pin_mode_XXX methods for the pin. For output modes, if you try to perform a write operation and have not first set the pin's mode, a RunTimeError exception is thrown. Below, a call to digital_write for pin 5 was made before set_pin_mode_digital_output was called: python3 no_pin_mode_set.py TelemetrixRpiPicoW: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. Establishing IP connection... Successfully connected to: 192.168.2.102:31335 Retrieving Telemetrix4picoW firmware ID... Telemetrix4picoW firmware version: 1.0 Traceback (most recent call last): File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/ play/no_pin_mode_set.py\", line 5, in <module> board.digital_write(pin=5, value=1) File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/telemetrix_rpi_pico_w/telemetrix_rpi_pico_w.py\", line 384, in digital_write raise RuntimeError('digital_write: You must set the pin mode before ' RuntimeError: digital_write: You must set the pin mode before performing a digital write. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Pin Modes"},{"location":"analog_input/","text":"set_pin_mode_analog_input This method enables one of the four ADC ports. Once this method is called, data change reporting is enabled for that port. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. def set_pin_mode_analog_input(self, adc_number, differential=0, callback=None): \"\"\" Set a pin as an analog input. :param adc_number: ADC Number 0-2 ADC numbers are mapped as following: ADC0 = GPIO 26 (Physical Pin 31) ADC1 = GPIO 27 (Physical Pin 32) ADC2 = GPIO 28 (Physical Pin 34) NOTE: This is different from telemetrix-rpi-pico To get cpu temperature, call get_cpu_temperature. :param differential: difference in previous to current value before report will be generated :param callback: callback function callback returns a data list: [ANALOG_REPORT, pin_number, pin_value, raw_time_stamp] The ANALOG_REPORT = 3 Parameters: adc_number The Pico supports 3 ADC inputs. Associate the desired ADC port with your device using this parameter. ADC Number GPIO Number Physical Pin Number ADC 0 26 31 ADC 1 27 32 ADC2 28 34 differential The differential parameter is used to qualify reported values by comparing the last value read and determining if the current value differs from the previous value (plus or minus) by the differential value. If the differential is set to zero, then all changes are reported. Otherwise, the data value must change by a value, plus or minus the differential value. So if the differential value is set to 5, and the last reading was a value of 1000, a report will be generated when the current value is greater than 1005 or less than 995. callback You must specify a callback function using this parameter. Data returned to the callback for an analog input is: [pin_type, pin_number, pin_value, raw_time_stamp] The pin type is used to differentiate the pin type that generated the report. For analog inputs, this value is 3. The pin number contains the reporting ADC number. The timestamp is in raw time form. disable_analog_reporting Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific ADC. This method allows you to do that. def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for ADC0, the number is 0. enable_analog_reporting You may re-enable reporting for a selected ADC using this method. def enable_analog_reporting(self, pin) Enables analog reporting for the specified pin. :param pin: Analog pin number. For example for ADC0, the number is 0. disable_all_reporting This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. def disable_all_reporting(self) Disable reporting for all digital and analog input pins Example: analog_input.py Example Sample Output: ADC Report Type: 3 ADC: 2 Value: 870 Time Stamp: 2021-03-18 14:11:12 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Analog Input Methods"},{"location":"analog_input/#set_pin_mode_analog_input","text":"This method enables one of the four ADC ports. Once this method is called, data change reporting is enabled for that port. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. def set_pin_mode_analog_input(self, adc_number, differential=0, callback=None): \"\"\" Set a pin as an analog input. :param adc_number: ADC Number 0-2 ADC numbers are mapped as following: ADC0 = GPIO 26 (Physical Pin 31) ADC1 = GPIO 27 (Physical Pin 32) ADC2 = GPIO 28 (Physical Pin 34) NOTE: This is different from telemetrix-rpi-pico To get cpu temperature, call get_cpu_temperature. :param differential: difference in previous to current value before report will be generated :param callback: callback function callback returns a data list: [ANALOG_REPORT, pin_number, pin_value, raw_time_stamp] The ANALOG_REPORT = 3","title":"set_pin_mode_analog_input"},{"location":"analog_input/#parameters","text":"","title":"Parameters:"},{"location":"analog_input/#adc_number","text":"The Pico supports 3 ADC inputs. Associate the desired ADC port with your device using this parameter. ADC Number GPIO Number Physical Pin Number ADC 0 26 31 ADC 1 27 32 ADC2 28 34","title":"adc_number"},{"location":"analog_input/#differential","text":"The differential parameter is used to qualify reported values by comparing the last value read and determining if the current value differs from the previous value (plus or minus) by the differential value. If the differential is set to zero, then all changes are reported. Otherwise, the data value must change by a value, plus or minus the differential value. So if the differential value is set to 5, and the last reading was a value of 1000, a report will be generated when the current value is greater than 1005 or less than 995.","title":"differential"},{"location":"analog_input/#callback","text":"You must specify a callback function using this parameter. Data returned to the callback for an analog input is: [pin_type, pin_number, pin_value, raw_time_stamp] The pin type is used to differentiate the pin type that generated the report. For analog inputs, this value is 3. The pin number contains the reporting ADC number. The timestamp is in raw time form.","title":"callback"},{"location":"analog_input/#disable_analog_reporting","text":"Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific ADC. This method allows you to do that. def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for ADC0, the number is 0.","title":"disable_analog_reporting"},{"location":"analog_input/#enable_analog_reporting","text":"You may re-enable reporting for a selected ADC using this method. def enable_analog_reporting(self, pin) Enables analog reporting for the specified pin. :param pin: Analog pin number. For example for ADC0, the number is 0.","title":"enable_analog_reporting"},{"location":"analog_input/#disable_all_reporting","text":"This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. def disable_all_reporting(self) Disable reporting for all digital and analog input pins","title":"disable_all_reporting"},{"location":"analog_input/#example-analog_inputpy","text":"","title":"Example: analog_input.py"},{"location":"analog_input/#example-sample-output","text":"ADC Report Type: 3 ADC: 2 Value: 870 Time Stamp: 2021-03-18 14:11:12 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"analog_input2/","text":"set_pin_mode_analog_input This method enables one of the four ADC ports. Once this method is called, data change reporting is enabled for that port. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. async def set_pin_mode_analog_input(self, adc_number, differential=0, callback=None) Set a pin as an analog input. :param adc_number: ADC Number 0-2 :param differential: difference in previous to current value before report will be generated :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 3 Parameters: adc_number The Pico supports 4 ADC inputs. ADC3 is hardwired to the internal temperature sensor. Associate the desired ADC port with your device using this parameter. ADC Number GPIO Number Physical Pin Number ADC 0 26 31 ADC 1 27 32 ADC2 28 34 differential The differential parameter is used to qualify reported values by comparing the last value read and determining if the current value differs from the previous value (plus or minus) by the differential value. If the differential is set to zero, then all changes are reported. Otherwise, the data value must change by a value, plus or minus the differential value. So if the differential value is set to 5, and the last reading was a value of 1000, a report will be generated when the current value is greater than 1005 or less than 995. callback You must specify a callback function using this parameter. Data returned to the callback for an analog input is: [pin_type, pin_number, pin_value, raw_time_stamp] The pin type is used to differentiate the pin type that generated the report. For analog inputs, this value is 3. The pin number contains the reporting ADC number. The timestamp is in raw time form. disable_analog_reporting Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific ADC. This method allows you to do that. async def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for ADC0, the number is 0. enable_analog_reporting You may re-enable reporting for a selected ADC using this method. async def enable_analog_reporting(self, pin) Enables analog reporting for the specified pin. :param pin: Analog pin number. For example for ADC0, the number is 0. disable_all_reporting This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. async def disable_all_reporting(self) Disable reporting for all digital and analog input pins Example: analog_input_aio.py Example Sample Output: ADC Report Type: 3 ADC: 2 Value: 870 Time Stamp: 2021-03-18 14:11:12 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Analog Input Methods"},{"location":"analog_input2/#set_pin_mode_analog_input","text":"This method enables one of the four ADC ports. Once this method is called, data change reporting is enabled for that port. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. async def set_pin_mode_analog_input(self, adc_number, differential=0, callback=None) Set a pin as an analog input. :param adc_number: ADC Number 0-2 :param differential: difference in previous to current value before report will be generated :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 3","title":"set_pin_mode_analog_input"},{"location":"analog_input2/#parameters","text":"","title":"Parameters:"},{"location":"analog_input2/#adc_number","text":"The Pico supports 4 ADC inputs. ADC3 is hardwired to the internal temperature sensor. Associate the desired ADC port with your device using this parameter. ADC Number GPIO Number Physical Pin Number ADC 0 26 31 ADC 1 27 32 ADC2 28 34","title":"adc_number"},{"location":"analog_input2/#differential","text":"The differential parameter is used to qualify reported values by comparing the last value read and determining if the current value differs from the previous value (plus or minus) by the differential value. If the differential is set to zero, then all changes are reported. Otherwise, the data value must change by a value, plus or minus the differential value. So if the differential value is set to 5, and the last reading was a value of 1000, a report will be generated when the current value is greater than 1005 or less than 995.","title":"differential"},{"location":"analog_input2/#callback","text":"You must specify a callback function using this parameter. Data returned to the callback for an analog input is: [pin_type, pin_number, pin_value, raw_time_stamp] The pin type is used to differentiate the pin type that generated the report. For analog inputs, this value is 3. The pin number contains the reporting ADC number. The timestamp is in raw time form.","title":"callback"},{"location":"analog_input2/#disable_analog_reporting","text":"Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific ADC. This method allows you to do that. async def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for ADC0, the number is 0.","title":"disable_analog_reporting"},{"location":"analog_input2/#enable_analog_reporting","text":"You may re-enable reporting for a selected ADC using this method. async def enable_analog_reporting(self, pin) Enables analog reporting for the specified pin. :param pin: Analog pin number. For example for ADC0, the number is 0.","title":"enable_analog_reporting"},{"location":"analog_input2/#disable_all_reporting","text":"This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. async def disable_all_reporting(self) Disable reporting for all digital and analog input pins","title":"disable_all_reporting"},{"location":"analog_input2/#example-analog_input_aiopy","text":"","title":"Example: analog_input_aio.py"},{"location":"analog_input2/#example-sample-output","text":"ADC Report Type: 3 ADC: 2 Value: 870 Time Stamp: 2021-03-18 14:11:12 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"callbacks/","text":"Registering A Callback A callback function must be registered when you set a pin to an input mode. The code below illustrates a typical callback function. def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin mode, pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Report Type: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} ' f'Value: {data[CB_VALUE]} Time Stamp: {date}') And here, the callback is registered when the set_pin_mode is called: board.set_pin_mode_digital_input_pullup(12, the_callback) If you forget to register a callback, a RunTime exception will be thrown. Traceback (most recent call last): File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/ play/no_callback_registered.py\", line 5, in <module> board.set_pin_mode_digital_input(5) File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/telemetrix_rpi_pico_w/telemetrix_rpi_pico_w.py\", line 752, in set_pin_mode_digital_input raise RuntimeError('A callback must be specified') RuntimeError: A callback must be specified Callback Function Parameter A callback function or method must accept a single parameter. The client automatically fills in this parameter in the form of a list when an input data change notification is received. For \"the_callback\" above, this parameter is named data. The list contents vary from input pin type to input pin type and are described in detail for each set_pin_mode_XXX method in the API documentation. The first element in the list identifies the pin type, and the last element is a timestamp of the data change occurrence. Other elements identify the GPIO pin, the current data value, and any additional relevant information. For example, the list may contain [DIGITAL_REPORT, pin_number, pin_value, raw_time_stamp] DIGITAL_REPORT = 2 NOTE: Telemetrix does not support polling or direct read methods for inputs. Instead, as soon as a data change is detected, the pin's associated callback is called, allowing immediate response to data changes and, generally, a more straightforward application design. Pin Types Pin Mode Pin Mode Value Digital Input (including pullup and pulldown) 2 Analog Input (ADC) 3 I2C 10 SONAR Distance 11 DHT 12 Converting The Raw Timestamp To convert the raw timestamp field to a human-readable time, use time.localtime() . date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Callbacks"},{"location":"callbacks/#registering-a-callback","text":"A callback function must be registered when you set a pin to an input mode. The code below illustrates a typical callback function. def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin mode, pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Report Type: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} ' f'Value: {data[CB_VALUE]} Time Stamp: {date}') And here, the callback is registered when the set_pin_mode is called: board.set_pin_mode_digital_input_pullup(12, the_callback) If you forget to register a callback, a RunTime exception will be thrown. Traceback (most recent call last): File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/ play/no_callback_registered.py\", line 5, in <module> board.set_pin_mode_digital_input(5) File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/telemetrix_rpi_pico_w/telemetrix_rpi_pico_w.py\", line 752, in set_pin_mode_digital_input raise RuntimeError('A callback must be specified') RuntimeError: A callback must be specified","title":"Registering A Callback"},{"location":"callbacks/#callback-function-parameter","text":"A callback function or method must accept a single parameter. The client automatically fills in this parameter in the form of a list when an input data change notification is received. For \"the_callback\" above, this parameter is named data. The list contents vary from input pin type to input pin type and are described in detail for each set_pin_mode_XXX method in the API documentation. The first element in the list identifies the pin type, and the last element is a timestamp of the data change occurrence. Other elements identify the GPIO pin, the current data value, and any additional relevant information. For example, the list may contain [DIGITAL_REPORT, pin_number, pin_value, raw_time_stamp] DIGITAL_REPORT = 2 NOTE: Telemetrix does not support polling or direct read methods for inputs. Instead, as soon as a data change is detected, the pin's associated callback is called, allowing immediate response to data changes and, generally, a more straightforward application design.","title":"Callback Function Parameter"},{"location":"callbacks/#pin-types","text":"Pin Mode Pin Mode Value Digital Input (including pullup and pulldown) 2 Analog Input (ADC) 3 I2C 10 SONAR Distance 11 DHT 12","title":"Pin Types"},{"location":"callbacks/#converting-the-raw-timestamp","text":"To convert the raw timestamp field to a human-readable time, use time.localtime() . date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Converting The Raw Timestamp"},{"location":"debug/","text":"Diagnostic Aids Two methods have been provided to aid in debugging. loopback This method checks for WiFi connectivity between the client and the server. def loop_back(self, start_character, callback=None) This is a debugging method to send a character to the pico device, and have the device loop it back. :param start_character: The character to loop back. It should be an integer. :param callback: Looped back character will appear in the callback method Example: loop_back.py Sample Output Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z get_pico_pins def get_pico_pins(self): This method returns the pico_pins dictionary :return: pico_pins The keys in the dictionary returned from this method are the GPIO pin-numbers. The value is the pin type assigned to the pin: Pin Mode MAP: PIN TYPE VALUE DIGITAL_INPUT 0 DIGITAL_OUTPUT 1 PWM_OUTPUT 2 DIGITAL_INPUT_PULLUP 3 DIGITAL_INPUT_PULL_DOWN 4 ANALOG_INPUT 5 i2c 9 NEO_PIXEL 10 MODE_NOT_SET 255 Example: get_pico_pins.py Sample Output {0: 255, 1: 255, 2: 255, 3: 255, 4: 9, 5: 9, 6: 0, 7: 255, 8: 255, 9: 3, 10: 255, 11: 255, 12: 255, 13: 255, 14: 10, 15: 255, 16: 255, 17: 255, 18: 255, 19:255, 20: 255, 21: 255, 22: 255, 25: 255, 26: 255, 27: 5, 28: 255} Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z send_debug_info reports The Telemetrix4RpiPicoW server contains the send_debug_info function that allows you to send internal values back to the client and display them on the console. void send_debug_info(byte id, int value) The report is formatted as follows: DEBUG ID: byte_id Value: int_value NOTE: You may also add Serial.println statements to the server sketch and use a serial monitor to retrieve debug information. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Diagnostic Aids"},{"location":"debug/#diagnostic-aids","text":"Two methods have been provided to aid in debugging.","title":"Diagnostic Aids"},{"location":"debug/#loopback","text":"This method checks for WiFi connectivity between the client and the server. def loop_back(self, start_character, callback=None) This is a debugging method to send a character to the pico device, and have the device loop it back. :param start_character: The character to loop back. It should be an integer. :param callback: Looped back character will appear in the callback method","title":"loopback"},{"location":"debug/#example-loop_backpy","text":"","title":"Example: loop_back.py"},{"location":"debug/#sample-output","text":"Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z","title":"Sample Output"},{"location":"debug/#get_pico_pins","text":"def get_pico_pins(self): This method returns the pico_pins dictionary :return: pico_pins The keys in the dictionary returned from this method are the GPIO pin-numbers. The value is the pin type assigned to the pin: Pin Mode MAP: PIN TYPE VALUE DIGITAL_INPUT 0 DIGITAL_OUTPUT 1 PWM_OUTPUT 2 DIGITAL_INPUT_PULLUP 3 DIGITAL_INPUT_PULL_DOWN 4 ANALOG_INPUT 5 i2c 9 NEO_PIXEL 10 MODE_NOT_SET 255","title":"get_pico_pins"},{"location":"debug/#example-get_pico_pinspy","text":"","title":"Example: get_pico_pins.py"},{"location":"debug/#sample-output_1","text":"{0: 255, 1: 255, 2: 255, 3: 255, 4: 9, 5: 9, 6: 0, 7: 255, 8: 255, 9: 3, 10: 255, 11: 255, 12: 255, 13: 255, 14: 10, 15: 255, 16: 255, 17: 255, 18: 255, 19:255, 20: 255, 21: 255, 22: 255, 25: 255, 26: 255, 27: 5, 28: 255} Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z","title":"Sample Output"},{"location":"debug/#send_debug_info-reports","text":"The Telemetrix4RpiPicoW server contains the send_debug_info function that allows you to send internal values back to the client and display them on the console. void send_debug_info(byte id, int value) The report is formatted as follows: DEBUG ID: byte_id Value: int_value NOTE: You may also add Serial.println statements to the server sketch and use a serial monitor to retrieve debug information. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"send_debug_info reports"},{"location":"debug2/","text":"Diagnostic Aids Two methods have been provided to aid in debugging. loopback This method checks for WiFi connectivity between the client and the server. async def loop_back(self, start_character, callback=None) This is a debugging method to send a character to the pico device, and have the device loop it back. :param start_character: The character to loop back. It should be an integer. :param callback: Looped back character will appear in the callback method Example: loop_back_aio.py Sample Output Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z get_pico_pins async def get_pico_pins(self): This method returns the pico_pins dictionary :return: pico_pins The keys in the dictionary returned from this method are the GPIO pin-numbers. The value is the pin type assigned to the pin: Pin Mode MAP: PIN TYPE VALUE DIGITAL_INPUT 0 DIGITAL_OUTPUT 1 PWM_OUTPUT 2 DIGITAL_INPUT_PULLUP 3 DIGITAL_INPUT_PULL_DOWN 4 ANALOG_INPUT 5 i2c 9 NEO_PIXEL 10 MODE_NOT_SET 255 Example: get_pico_pins_aio.py Sample Output {0: 255, 1: 255, 2: 255, 3: 255, 4: 9, 5: 9, 6: 0, 7: 255, 8: 255, 9: 3, 10: 255, 11: 255, 12: 255, 13: 255, 14: 10, 15: 255, 16: 255, 17: 255, 18: 255, 19:255, 20: 255, 21: 255, 22: 255, 25: 255, 26: 255, 27: 5, 28: 255} Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z send_debug_info reports The Telemetrix4RpiPicoW server contains the send_debug_info function that allows you to send internal values back to the client and display them on the console. void send_debug_info(byte id, int value) The report is formatted as follows: DEBUG ID: byte_id Value: int_value NOTE: You may also add Serial.println statements to the server sketch and use a serial monitor to retrieve debug information. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Diagnostic Aids"},{"location":"debug2/#diagnostic-aids","text":"Two methods have been provided to aid in debugging.","title":"Diagnostic Aids"},{"location":"debug2/#loopback","text":"This method checks for WiFi connectivity between the client and the server. async def loop_back(self, start_character, callback=None) This is a debugging method to send a character to the pico device, and have the device loop it back. :param start_character: The character to loop back. It should be an integer. :param callback: Looped back character will appear in the callback method","title":"loopback"},{"location":"debug2/#example-loop_back_aiopy","text":"","title":"Example: loop_back_aio.py"},{"location":"debug2/#sample-output","text":"Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z","title":"Sample Output"},{"location":"debug2/#get_pico_pins","text":"async def get_pico_pins(self): This method returns the pico_pins dictionary :return: pico_pins The keys in the dictionary returned from this method are the GPIO pin-numbers. The value is the pin type assigned to the pin: Pin Mode MAP: PIN TYPE VALUE DIGITAL_INPUT 0 DIGITAL_OUTPUT 1 PWM_OUTPUT 2 DIGITAL_INPUT_PULLUP 3 DIGITAL_INPUT_PULL_DOWN 4 ANALOG_INPUT 5 i2c 9 NEO_PIXEL 10 MODE_NOT_SET 255","title":"get_pico_pins"},{"location":"debug2/#example-get_pico_pins_aiopy","text":"","title":"Example: get_pico_pins_aio.py"},{"location":"debug2/#sample-output_1","text":"{0: 255, 1: 255, 2: 255, 3: 255, 4: 9, 5: 9, 6: 0, 7: 255, 8: 255, 9: 3, 10: 255, 11: 255, 12: 255, 13: 255, 14: 10, 15: 255, 16: 255, 17: 255, 18: 255, 19:255, 20: 255, 21: 255, 22: 255, 25: 255, 26: 255, 27: 5, 28: 255} Sending: A Sending: B Sending: Z Looped back: A Looped back: B Looped back: Z","title":"Sample Output"},{"location":"debug2/#send_debug_info-reports","text":"The Telemetrix4RpiPicoW server contains the send_debug_info function that allows you to send internal values back to the client and display them on the console. void send_debug_info(byte id, int value) The report is formatted as follows: DEBUG ID: byte_id Value: int_value NOTE: You may also add Serial.println statements to the server sketch and use a serial monitor to retrieve debug information. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"send_debug_info reports"},{"location":"dht/","text":"set_pin_mode_dht def set_pin_mode_dht(self, pin, callback=None) :param pin: connection pin :param callback: callback function callback returns a data list: DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature (c),Time] DHT_REPORT = 12 A maximum of 2 DHT devices is supported. Reporting will begin immediately after executing this method. Reports are generated every 2 seconds. Example: dht.py Example Sample Output: DHT Data Report:Pin: 2 Humidity: 39.0 Temperature: 25.0c 77f Time: 2021-05-04 17:14:20 DHT Data Report:Pin: 15 Humidity: 49.79 Temperature: 24.1c 75f Time: 2021-05-04 17:14:22 DHT Data Report:Pin: 2 Humidity: 42.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:24 DHT Data Report:Pin: 15 Humidity: 45.79 Temperature: 23.79c 75f Time: 2021-05-04 17:14:26 DHT Data Report:Pin: 2 Humidity: 40.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:28 DHT Data Report:Pin: 15 Humidity: 45.7 Temperature: 23.79c 75f Time: 2021-05-04 17:14:30 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"DHT Humidity/Temperature Sensor Methods"},{"location":"dht/#set_pin_mode_dht","text":"def set_pin_mode_dht(self, pin, callback=None) :param pin: connection pin :param callback: callback function callback returns a data list: DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature (c),Time] DHT_REPORT = 12 A maximum of 2 DHT devices is supported. Reporting will begin immediately after executing this method. Reports are generated every 2 seconds.","title":"set_pin_mode_dht"},{"location":"dht/#example-dhtpy","text":"","title":"Example: dht.py"},{"location":"dht/#example-sample-output","text":"DHT Data Report:Pin: 2 Humidity: 39.0 Temperature: 25.0c 77f Time: 2021-05-04 17:14:20 DHT Data Report:Pin: 15 Humidity: 49.79 Temperature: 24.1c 75f Time: 2021-05-04 17:14:22 DHT Data Report:Pin: 2 Humidity: 42.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:24 DHT Data Report:Pin: 15 Humidity: 45.79 Temperature: 23.79c 75f Time: 2021-05-04 17:14:26 DHT Data Report:Pin: 2 Humidity: 40.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:28 DHT Data Report:Pin: 15 Humidity: 45.7 Temperature: 23.79c 75f Time: 2021-05-04 17:14:30 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"dht2/","text":"set_pin_mode_dht async def set_pin_mode_dht(self, pin, callback=None) :param pin: connection pin :param callback: callback function callback returns a data list: DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature (c),Time] DHT_REPORT = 12 A maximum of 2 DHT devices is supported. Reporting will begin immediately after executing this method. Reports are generated every 2 seconds. Example: dht_aio.py Example Sample Output: DHT Data Report:Pin: 2 Humidity: 39.0 Temperature: 25.0c 77f Time: 2021-05-04 17:14:20 DHT Data Report:Pin: 15 Humidity: 49.79 Temperature: 24.1c 75f Time: 2021-05-04 17:14:22 DHT Data Report:Pin: 2 Humidity: 42.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:24 DHT Data Report:Pin: 15 Humidity: 45.79 Temperature: 23.79c 75f Time: 2021-05-04 17:14:26 DHT Data Report:Pin: 2 Humidity: 40.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:28 DHT Data Report:Pin: 15 Humidity: 45.7 Temperature: 23.79c 75f Time: 2021-05-04 17:14:30 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"DHT Humidity/Temperature Sensor Methods"},{"location":"dht2/#set_pin_mode_dht","text":"async def set_pin_mode_dht(self, pin, callback=None) :param pin: connection pin :param callback: callback function callback returns a data list: DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature (c),Time] DHT_REPORT = 12 A maximum of 2 DHT devices is supported. Reporting will begin immediately after executing this method. Reports are generated every 2 seconds.","title":"set_pin_mode_dht"},{"location":"dht2/#example-dht_aiopy","text":"","title":"Example: dht_aio.py"},{"location":"dht2/#example-sample-output","text":"DHT Data Report:Pin: 2 Humidity: 39.0 Temperature: 25.0c 77f Time: 2021-05-04 17:14:20 DHT Data Report:Pin: 15 Humidity: 49.79 Temperature: 24.1c 75f Time: 2021-05-04 17:14:22 DHT Data Report:Pin: 2 Humidity: 42.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:24 DHT Data Report:Pin: 15 Humidity: 45.79 Temperature: 23.79c 75f Time: 2021-05-04 17:14:26 DHT Data Report:Pin: 2 Humidity: 40.0 Temperature: 24.0c 75f Time: 2021-05-04 17:14:28 DHT Data Report:Pin: 15 Humidity: 45.7 Temperature: 23.79c 75f Time: 2021-05-04 17:14:30 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"digital_input/","text":"set_pin_mode_digital_input def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 2 set_pin_mode_digital_input_pull_down def set_pin_mode_digital_input_pull_down(self, pin_number, callback=None) Set a pin as a digital input with pull down enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2 set_pin_mode_digital_input_pullup def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2 The signature for all three of these methods is identical. The only difference is how the Pico W controls its internal resistor. This method enables one of the selected GPIO pins for digital input. Once this method is called, data change reporting is enabled for that pin. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. The pin type in the report is used to differentiate the pin type that generated the report. For digital inputs, this value is 2. The pin number contains the reporting GPIO pin number. The timestamp is in raw time form. disable_digital_reporting Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific digital input pin. This method allows you to do that. def disable_digital_reporting(self, pin) Disables digital reporting for a single digital input. :param pin: Pin number. enable_digital_reporting You may re-enable reporting for a selected digital input pin using this method. def enable_digital_reporting(self, pin) Enable reporting on the specified digital pin. :param pin: Pin number. disable_all_reporting This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. def disable_all_reporting(self) Disable reporting for all digital and analog input pins Example: digital_input_pullup.py Example Sample Output: Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:08 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:09 Disabling reporting for pin 12 3 seconds. All others enabled Re-enabling reporting for pin 12. Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:16 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:16 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Digital Input Methods"},{"location":"digital_input/#set_pin_mode_digital_input","text":"def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 2","title":"set_pin_mode_digital_input"},{"location":"digital_input/#set_pin_mode_digital_input_pull_down","text":"def set_pin_mode_digital_input_pull_down(self, pin_number, callback=None) Set a pin as a digital input with pull down enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2","title":"set_pin_mode_digital_input_pull_down"},{"location":"digital_input/#set_pin_mode_digital_input_pullup","text":"def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2 The signature for all three of these methods is identical. The only difference is how the Pico W controls its internal resistor. This method enables one of the selected GPIO pins for digital input. Once this method is called, data change reporting is enabled for that pin. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. The pin type in the report is used to differentiate the pin type that generated the report. For digital inputs, this value is 2. The pin number contains the reporting GPIO pin number. The timestamp is in raw time form.","title":"set_pin_mode_digital_input_pullup"},{"location":"digital_input/#disable_digital_reporting","text":"Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific digital input pin. This method allows you to do that. def disable_digital_reporting(self, pin) Disables digital reporting for a single digital input. :param pin: Pin number.","title":"disable_digital_reporting"},{"location":"digital_input/#enable_digital_reporting","text":"You may re-enable reporting for a selected digital input pin using this method. def enable_digital_reporting(self, pin) Enable reporting on the specified digital pin. :param pin: Pin number.","title":"enable_digital_reporting"},{"location":"digital_input/#disable_all_reporting","text":"This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. def disable_all_reporting(self) Disable reporting for all digital and analog input pins","title":"disable_all_reporting"},{"location":"digital_input/#example-digital_input_pulluppy","text":"","title":"Example: digital_input_pullup.py"},{"location":"digital_input/#example-sample-output","text":"Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:08 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:09 Disabling reporting for pin 12 3 seconds. All others enabled Re-enabling reporting for pin 12. Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:16 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:16 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"digital_input2/","text":"set_pin_mode_digital_input async def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 2 set_pin_mode_digital_input_pull_down async def set_pin_mode_digital_input_pull_down(self, pin_number, callback=None) Set a pin as a digital input with pull down enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2 set_pin_mode_digital_input_pullup async def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2 The signature for all three of these methods is identical. The only difference is how the Pico controls its internal resistor. This method enables one of the selected GPIO pins for digital input. Once this method is called, data change reporting is enabled for that pin. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. The pin type in the report is used to differentiate the pin type that generated the report. For digital inputs, this value is 2. The pin number contains the reporting GPIO pin number. The timestamp is in raw time form. disable_digital_reporting Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific digital input pin. This method allows you to do that. async def disable_digital_reporting(self, pin) Disables digital reporting for a single digital input. :param pin: Pin number. enable_digital_reporting You may re-enable reporting for a selected digital input pin using this method. async def enable_digital_reporting(self, pin) Enable reporting on the specified digital pin. :param pin: Pin number. disable_all_reporting This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. async def disable_all_reporting(self) Disable reporting for all digital and analog input pins Example: digital_input_pullup_aio.py Example Sample Output: Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:08 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:09 Disabling reporting for pin 12 3 seconds. All others enabled Re-enabling reporting for pin 12. Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:16 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:16 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Digital Input Methods"},{"location":"digital_input2/#set_pin_mode_digital_input","text":"async def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 2","title":"set_pin_mode_digital_input"},{"location":"digital_input2/#set_pin_mode_digital_input_pull_down","text":"async def set_pin_mode_digital_input_pull_down(self, pin_number, callback=None) Set a pin as a digital input with pull down enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2","title":"set_pin_mode_digital_input_pull_down"},{"location":"digital_input2/#set_pin_mode_digital_input_pullup","text":"async def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: pico pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 2 The signature for all three of these methods is identical. The only difference is how the Pico controls its internal resistor. This method enables one of the selected GPIO pins for digital input. Once this method is called, data change reporting is enabled for that pin. A report is generated when the previously read value differs from the current value. Initially, the previously read value is set to zero. Therefore, the first report will be generated when the current value is non-zero. The pin type in the report is used to differentiate the pin type that generated the report. For digital inputs, this value is 2. The pin number contains the reporting GPIO pin number. The timestamp is in raw time form.","title":"set_pin_mode_digital_input_pullup"},{"location":"digital_input2/#disable_digital_reporting","text":"Reporting is automatically enabled when you set the pin mode. There are times you may wish to turn off reporting for a specific digital input pin. This method allows you to do that. async def disable_digital_reporting(self, pin) Disables digital reporting for a single digital input. :param pin: Pin number.","title":"disable_digital_reporting"},{"location":"digital_input2/#enable_digital_reporting","text":"You may re-enable reporting for a selected digital input pin using this method. async def enable_digital_reporting(self, pin) Enable reporting on the specified digital pin. :param pin: Pin number.","title":"enable_digital_reporting"},{"location":"digital_input2/#disable_all_reporting","text":"This method disables reporting for all analog and digital pins configured as inputs. To re-enable, you will need to re-enable each pin individually. async def disable_all_reporting(self) Disable reporting for all digital and analog input pins","title":"disable_all_reporting"},{"location":"digital_input2/#example-digital_input_pullup_aiopy","text":"","title":"Example: digital_input_pullup_aio.py"},{"location":"digital_input2/#example-sample-output","text":"Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:08 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:09 Disabling reporting for pin 12 3 seconds. All others enabled Re-enabling reporting for pin 12. Report Type: 2 Pin: 12 Value: 0 Time Stamp: 2021-03-18 14:37:16 Report Type: 2 Pin: 12 Value: 1 Time Stamp: 2021-03-18 14:37:16 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"digital_output/","text":"set_pin_mode_digital_output def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: pico pin number NOTE: This method must be called before calling digital_write. digital_write def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: pico pin number :param value: pin value (1 or 0) Example: blink.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Digital Output Methods"},{"location":"digital_output/#set_pin_mode_digital_output","text":"def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: pico pin number NOTE: This method must be called before calling digital_write.","title":"set_pin_mode_digital_output"},{"location":"digital_output/#digital_write","text":"def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: pico pin number :param value: pin value (1 or 0)","title":"digital_write"},{"location":"digital_output/#example-blinkpy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: blink.py"},{"location":"digital_output2/","text":"set_pin_mode_digital_output async def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: pico pin number NOTE: This method must be called before calling digital_write. digital_write async def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: pico pin number :param value: pin value (1 or 0) Example: blink_aio.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Digital Output Methods"},{"location":"digital_output2/#set_pin_mode_digital_output","text":"async def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: pico pin number NOTE: This method must be called before calling digital_write.","title":"set_pin_mode_digital_output"},{"location":"digital_output2/#digital_write","text":"async def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: pico pin number :param value: pin value (1 or 0)","title":"digital_write"},{"location":"digital_output2/#example-blink_aiopy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: blink_aio.py"},{"location":"examples/","text":"Once both the client and server software has been installed, it would be an excellent time to try an example to verify that bidirectional WI-FI communication is working between the server residing on the Pico W and a Python API application. An excellent candidate is get_cpu_temperature.py. It requires no additional hardware and returns the internal temperature of the Pico W CPU. Downloading The Repository And Extracting The Examples To run any of the included example codes on the telemetrix-rpi-pico-w GitHub repository, click on the green Code button in the upper right corner and then click Download ZIP. Next, extract all the files. Running An Example Go to the examples directory. Select an example you wish to run. Modify the IP address in the example to match the IP address assigned to your Pico W. In a terminal, run the example with Python. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Downloading And Running The Examples"},{"location":"examples/#downloading-the-repository-and-extracting-the-examples","text":"To run any of the included example codes on the telemetrix-rpi-pico-w GitHub repository, click on the green Code button in the upper right corner and then click Download ZIP. Next, extract all the files.","title":"Downloading The Repository And Extracting The Examples"},{"location":"examples/#running-an-example","text":"Go to the examples directory. Select an example you wish to run. Modify the IP address in the example to match the IP address assigned to your Pico W. In a terminal, run the example with Python. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Running An Example"},{"location":"i2c/","text":"These methods are not specific to a given i2c device but instead allow you to control any i2c device by implementing the device's protocol as specified by the manufacturer's datasheet. set_pin_mode_i2c def set_pin_mode_i2c(self, i2c_port=0, sda_gpio=None, scl_gpio=None) Establish the standard pico i2c pins for i2c utilization. SDA pins: port 0 = 4 port 1 = 26 SCL pins: port 0 = 5 port 1 = 27 :param i2c_port: 0 = i2c0, 1 = i2c1 :param sda_gpio: gpio pin assigned to SDA :param scl_gpio: gpio pin assigned to SCL Notes THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE Callbacks are set within the individual i2c read methods of this API. See i2c_read, and i2c_write This method must be called before calling either i2c_read or i2c_write. This method selects one of the i2c ports and associates the SDA and SCL pins with that port. Note that GPIO pins 0 and 1 are not available for use. i2c_read def i2c_read(self, address, register, number_of_bytes, callback=None, i2c_port=0, send_stop=True) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = port 0, 1 = port 1 :param send_stop: If False, master retains control of the bus at the end of the transfer (no Stop is issued), and the next transfer will begin with a Restart rather than a Start. callback returns a data list: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] I2C_READ_REPORT = 10 This method allows you to read a specified number of bytes from the device. The address parameter specifies the i2c address of the device. The register parameter specifies the i2c register to use. If the device does not require a register to be specified, this parameter is set to None. The number_of_bytes parameter specifies how many bytes will be read from the device. Data is returned via callback, and therefore you must specify a callback parameter. The i2c_port specifies which of the two i2c ports to use for this device. The SDA and SCL pins are implied as a result of the call to set_pin_mode_i2c . Some devices require that after a read, the i2c master retain control of the bus. The no_stop parameter allows you to select this behavior. The data returned to the callback is similar to all other callbacks. The items in the list passed to the callback function are: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] The first element is the report type, and I2C_READ_REPORT has a value of 10. The i2c_port, the device's i2c address, the number of the bytes returned, the actual data bytes, and a time-stamp are also contained in the report. i2c_write def i2c_write(self, address, args, i2c_port=0) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list. NOTE: THIS MUST BE IN THE FORM OF A LIST. :param i2c_port: 0= port 0, 1 = port 1 This method is used to write a variable number of bytes to an i2c device. You specify the i2c address, a list of the bytes to send, the i2c port to use. Example: i2c_adxl345_accelerometer.py Example Sample Output: Raw Data: [10, 0, 83, 50, 6, 248, 255, 7, 0, 97, 0] ADXL345 Report On: 2021-05-04 17:36:52: i2c_port=0 x-pair=248, 255 y-pair=7, 0 z-pair=97, 0 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"I2C Methods"},{"location":"i2c/#set_pin_mode_i2c","text":"def set_pin_mode_i2c(self, i2c_port=0, sda_gpio=None, scl_gpio=None) Establish the standard pico i2c pins for i2c utilization. SDA pins: port 0 = 4 port 1 = 26 SCL pins: port 0 = 5 port 1 = 27 :param i2c_port: 0 = i2c0, 1 = i2c1 :param sda_gpio: gpio pin assigned to SDA :param scl_gpio: gpio pin assigned to SCL Notes THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE Callbacks are set within the individual i2c read methods of this API. See i2c_read, and i2c_write This method must be called before calling either i2c_read or i2c_write. This method selects one of the i2c ports and associates the SDA and SCL pins with that port. Note that GPIO pins 0 and 1 are not available for use.","title":"set_pin_mode_i2c"},{"location":"i2c/#i2c_read","text":"def i2c_read(self, address, register, number_of_bytes, callback=None, i2c_port=0, send_stop=True) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = port 0, 1 = port 1 :param send_stop: If False, master retains control of the bus at the end of the transfer (no Stop is issued), and the next transfer will begin with a Restart rather than a Start. callback returns a data list: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] I2C_READ_REPORT = 10 This method allows you to read a specified number of bytes from the device. The address parameter specifies the i2c address of the device. The register parameter specifies the i2c register to use. If the device does not require a register to be specified, this parameter is set to None. The number_of_bytes parameter specifies how many bytes will be read from the device. Data is returned via callback, and therefore you must specify a callback parameter. The i2c_port specifies which of the two i2c ports to use for this device. The SDA and SCL pins are implied as a result of the call to set_pin_mode_i2c . Some devices require that after a read, the i2c master retain control of the bus. The no_stop parameter allows you to select this behavior. The data returned to the callback is similar to all other callbacks. The items in the list passed to the callback function are: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] The first element is the report type, and I2C_READ_REPORT has a value of 10. The i2c_port, the device's i2c address, the number of the bytes returned, the actual data bytes, and a time-stamp are also contained in the report.","title":"i2c_read"},{"location":"i2c/#i2c_write","text":"def i2c_write(self, address, args, i2c_port=0) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list. NOTE: THIS MUST BE IN THE FORM OF A LIST. :param i2c_port: 0= port 0, 1 = port 1 This method is used to write a variable number of bytes to an i2c device. You specify the i2c address, a list of the bytes to send, the i2c port to use.","title":"i2c_write"},{"location":"i2c/#example-i2c_adxl345_accelerometerpy","text":"","title":"Example: i2c_adxl345_accelerometer.py"},{"location":"i2c/#example-sample-output","text":"Raw Data: [10, 0, 83, 50, 6, 248, 255, 7, 0, 97, 0] ADXL345 Report On: 2021-05-04 17:36:52: i2c_port=0 x-pair=248, 255 y-pair=7, 0 z-pair=97, 0 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"i2c2/","text":"These methods are not specific to a given i2c device but instead allow you to control any i2c device by implementing the device's protocol as specified by the manufacturer's datasheet. set_pin_mode_i2c async def set_pin_mode_i2c(self, i2c_port=0, sda_gpio=4, scl_gpio=5) Establish the standard pico i2c pins for i2c utilization. :param i2c_port: 0 = i2c0, 1 = i2c1 :param sda_gpio: gpio pin assigned to SDA :param scl_gpio: gpio pin assigned to SCL Notes THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE Callbacks are set within the individual i2c read methods of this API. See i2c_read, and i2c_write This method must be called before calling either i2c_read or i2c_write. This method selects one of the i2c ports and associates the SDA and SCL pins with that port. Note that GPIO pins 0 and 1 are not available for use. i2c_read async def i2c_read(self, address, register, number_of_bytes, callback=None, i2c_port=0, no_stop=False) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = port 0, 1 = port 1 :param no_stop: If true, master retains control of the bus at the end of the transfer (no Stop is issued), and the next transfer will begin with a Restart rather than a Start. callback returns a data list: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] I2C_READ_REPORT = 10 This method allows you to read a specified number of bytes from the device. The address parameter specifies the i2c address of the device. The register parameter specifies the i2c register to use. If the device does not require a register to be specified, this parameter is set to None. The number_of_bytes parameter specifies how many bytes will be read from the device. Data is returned via callback, and therefore you must specify a callback parameter. The i2c_port specifies which of the two i2c ports to use for this device. The SDA and SCL pins are implied as a result of the call to set_pin_mode_i2c . Some devices require that after a read, the i2c master retain control of the bus. The no_stop parameter allows you to select this behavior. The data returned to the callback is similar to all other callbacks. The items in the list passed to the callback function are: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] The first element is the report type, and I2C_READ_REPORT has a value of 10. The i2c_port, the device's i2c address, the number of the bytes returned, the actual data bytes, and a time-stamp are also contained in the report. i2c_write async def i2c_write(self, address, args, i2c_port=0, no_stop=False) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list. NOTE: THIS MUST BE IN THE FORM OF A LIST. :param i2c_port: 0= port 0, 1 = port 1 :param no_stop: If true, master retains control of the bus at the end of the transfer (no Stop is issued), and the next transfer will begin with a Restart rather than a Start. This method is used to write a variable number of bytes to an i2c device. You specify the i2c address, a list of the bytes to send, the i2c port to use, and a flag to indicate if the master retains control of the bus at the end of the transfer. Example: i2c_adxl345_accelerometer_aio.py Example Sample Output: TelemetrixRpiPicoAio: Version 1.0 Copyright (c) 2021 Alan Yorinks All Rights Reserved. Opening all potential serial ports... /dev/ttyACM0 Retrieving pico ID... Pico Unique ID: [230, 96, 88, 56, 131, 120, 0, 0] Telemetrix4RPiPico Version Number: 1.0 Raw Data: [10, 0, 83, 50, 6, 248, 255, 7, 0, 97, 0] ADXL345 Report On: 2021-05-04 17:36:52: i2c_port=0 x-pair=248, 255 y-pair=7, 0 z-pair=97, 0 TelemetrixRpiPicoAio: Version 1.0 Copyright (c) 2021 Alan Yorinks All Rights Reserved. Opening all potential serial ports... /dev/ttyACM0 Retrieving pico ID... Pico Unique ID: [230, 96, 88, 56, 131, 120, 0, 0] Telemetrix4RPiPico Version Number: 1.0 Raw Data: [10, 0, 83, 50, 6, 248, 255, 7, 0, 97, 0] ADXL345 Report On: 2021-05-04 17:36:52: i2c_port=0 x-pair=248, 255 y-pair=7, 0 z-pair=97, 0 Copyright (C) 2021 Alan Yorinks. All Rights Reserved.","title":"I2C Methods"},{"location":"i2c2/#set_pin_mode_i2c","text":"async def set_pin_mode_i2c(self, i2c_port=0, sda_gpio=4, scl_gpio=5) Establish the standard pico i2c pins for i2c utilization. :param i2c_port: 0 = i2c0, 1 = i2c1 :param sda_gpio: gpio pin assigned to SDA :param scl_gpio: gpio pin assigned to SCL Notes THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE Callbacks are set within the individual i2c read methods of this API. See i2c_read, and i2c_write This method must be called before calling either i2c_read or i2c_write. This method selects one of the i2c ports and associates the SDA and SCL pins with that port. Note that GPIO pins 0 and 1 are not available for use.","title":"set_pin_mode_i2c"},{"location":"i2c2/#i2c_read","text":"async def i2c_read(self, address, register, number_of_bytes, callback=None, i2c_port=0, no_stop=False) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = port 0, 1 = port 1 :param no_stop: If true, master retains control of the bus at the end of the transfer (no Stop is issued), and the next transfer will begin with a Restart rather than a Start. callback returns a data list: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] I2C_READ_REPORT = 10 This method allows you to read a specified number of bytes from the device. The address parameter specifies the i2c address of the device. The register parameter specifies the i2c register to use. If the device does not require a register to be specified, this parameter is set to None. The number_of_bytes parameter specifies how many bytes will be read from the device. Data is returned via callback, and therefore you must specify a callback parameter. The i2c_port specifies which of the two i2c ports to use for this device. The SDA and SCL pins are implied as a result of the call to set_pin_mode_i2c . Some devices require that after a read, the i2c master retain control of the bus. The no_stop parameter allows you to select this behavior. The data returned to the callback is similar to all other callbacks. The items in the list passed to the callback function are: [I2C_READ_REPORT, i2c_port, i2c_device_address, count of data bytes, data bytes, time-stamp] The first element is the report type, and I2C_READ_REPORT has a value of 10. The i2c_port, the device's i2c address, the number of the bytes returned, the actual data bytes, and a time-stamp are also contained in the report.","title":"i2c_read"},{"location":"i2c2/#i2c_write","text":"async def i2c_write(self, address, args, i2c_port=0, no_stop=False) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list. NOTE: THIS MUST BE IN THE FORM OF A LIST. :param i2c_port: 0= port 0, 1 = port 1 :param no_stop: If true, master retains control of the bus at the end of the transfer (no Stop is issued), and the next transfer will begin with a Restart rather than a Start. This method is used to write a variable number of bytes to an i2c device. You specify the i2c address, a list of the bytes to send, the i2c port to use, and a flag to indicate if the master retains control of the bus at the end of the transfer.","title":"i2c_write"},{"location":"i2c2/#example-i2c_adxl345_accelerometer_aiopy","text":"","title":"Example: i2c_adxl345_accelerometer_aio.py"},{"location":"i2c2/#example-sample-output","text":"TelemetrixRpiPicoAio: Version 1.0 Copyright (c) 2021 Alan Yorinks All Rights Reserved. Opening all potential serial ports... /dev/ttyACM0 Retrieving pico ID... Pico Unique ID: [230, 96, 88, 56, 131, 120, 0, 0] Telemetrix4RPiPico Version Number: 1.0 Raw Data: [10, 0, 83, 50, 6, 248, 255, 7, 0, 97, 0] ADXL345 Report On: 2021-05-04 17:36:52: i2c_port=0 x-pair=248, 255 y-pair=7, 0 z-pair=97, 0 TelemetrixRpiPicoAio: Version 1.0 Copyright (c) 2021 Alan Yorinks All Rights Reserved. Opening all potential serial ports... /dev/ttyACM0 Retrieving pico ID... Pico Unique ID: [230, 96, 88, 56, 131, 120, 0, 0] Telemetrix4RPiPico Version Number: 1.0 Raw Data: [10, 0, 83, 50, 6, 248, 255, 7, 0, 97, 0] ADXL345 Report On: 2021-05-04 17:36:52: i2c_port=0 x-pair=248, 255 y-pair=7, 0 z-pair=97, 0 Copyright (C) 2021 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output:"},{"location":"importing/","text":"Importing To import this package, the standard import string is: from telemetrix_rpi_pico_w import telemetrix_rpi_pico_w Here is an example of instantiating the library and blinking the board LED until the user enters Control-C to end the application. import sys import time from telemetrix_rpi_pic_w import telemetrix_rpi_pico_w # The GPIO pin number for the built-in LED BOARD_LED = 32 # LED States ON = 1 OFF = 0 # instantiate the library # You must specify the IP address assigned to the Pico W server. board = telemetrix_rpi_pico_w.TelemetrixRpiPicoW(ip_address='192.168.1.133') # Set the DIGITAL_PIN as an output pin board.set_pin_mode_digital_output(BOARD_LED) try: while True: # turn led on board.digital_write(BOARD_LED, ON) time.sleep(1) # turn led off board.digital_write(BOARD_LED, OFF) time.sleep(1) except KeyboardInterrupt: board.shutdown() sys.exit(0) To exit your application cleanly, you should always call the shutdown method. The __init__ Method When instantiating the library, you can accept all the default parameters for most applications. However, you must specify the IP address assigned to the Pico W server. board = telemetrix_rpi_pico_w.TelemetrixRpiPicoW(ip_address='192.168.1.133') Several parameters offered by the __init__ method allow for some additional control. def __init__(self, ip_address=None, ip_port=31335, sleep_tune=0.000001, shutdown_on_exception=True, reset_on_shutdown=True): \"\"\" :param ip_address: IP address assigned to the Pico W :param ip_port: IP Port number. :param sleep_tune: A tuning parameter (typically not changed by user) :param shutdown_on_exception: call shutdown before raising a RunTimeError exception, or receiving a KeyboardInterrupt exception :param reset_on_shutdown: Reset the board upon shutdown Let's take a look at these parameters. ip_address This mandatory parameter must be set to the IP address assigned to the Pico W server. ip_port The ip_port value must be the same for both the client and the Pico W server. Typically, this value is accepted as is. If you change the value from the default, you must compile a matching value in the Pico W server. sleep_tune This parameter is the sleep value expressed in seconds and is used at several strategic points in the client. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, the client sleeps for the sleep_tune period before checking again. Typically, you would accept the default value. shutdown_on_exception When this parameter is set to True, the library shutdown method is automatically called when an exception is detected, and all reporting is disabled. By setting this parameter to False, the Pico W may continue to send data to your application even after restarting it. The default is True and is recommended to be used. reset_on_shutdown When set to True (the default), this parameter will send a message to the Pico W to reset itself. After resetting, the Pico W board LED will stay lit until a connection is made with your router. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Importing The Package And Instantiating The Library"},{"location":"importing/#importing","text":"To import this package, the standard import string is: from telemetrix_rpi_pico_w import telemetrix_rpi_pico_w Here is an example of instantiating the library and blinking the board LED until the user enters Control-C to end the application. import sys import time from telemetrix_rpi_pic_w import telemetrix_rpi_pico_w # The GPIO pin number for the built-in LED BOARD_LED = 32 # LED States ON = 1 OFF = 0 # instantiate the library # You must specify the IP address assigned to the Pico W server. board = telemetrix_rpi_pico_w.TelemetrixRpiPicoW(ip_address='192.168.1.133') # Set the DIGITAL_PIN as an output pin board.set_pin_mode_digital_output(BOARD_LED) try: while True: # turn led on board.digital_write(BOARD_LED, ON) time.sleep(1) # turn led off board.digital_write(BOARD_LED, OFF) time.sleep(1) except KeyboardInterrupt: board.shutdown() sys.exit(0) To exit your application cleanly, you should always call the shutdown method.","title":"Importing"},{"location":"importing/#the-__init__-method","text":"When instantiating the library, you can accept all the default parameters for most applications. However, you must specify the IP address assigned to the Pico W server. board = telemetrix_rpi_pico_w.TelemetrixRpiPicoW(ip_address='192.168.1.133') Several parameters offered by the __init__ method allow for some additional control. def __init__(self, ip_address=None, ip_port=31335, sleep_tune=0.000001, shutdown_on_exception=True, reset_on_shutdown=True): \"\"\" :param ip_address: IP address assigned to the Pico W :param ip_port: IP Port number. :param sleep_tune: A tuning parameter (typically not changed by user) :param shutdown_on_exception: call shutdown before raising a RunTimeError exception, or receiving a KeyboardInterrupt exception :param reset_on_shutdown: Reset the board upon shutdown Let's take a look at these parameters.","title":"The __init__ Method"},{"location":"importing/#ip_address","text":"This mandatory parameter must be set to the IP address assigned to the Pico W server.","title":"ip_address"},{"location":"importing/#ip_port","text":"The ip_port value must be the same for both the client and the Pico W server. Typically, this value is accepted as is. If you change the value from the default, you must compile a matching value in the Pico W server.","title":"ip_port"},{"location":"importing/#sleep_tune","text":"This parameter is the sleep value expressed in seconds and is used at several strategic points in the client. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, the client sleeps for the sleep_tune period before checking again. Typically, you would accept the default value.","title":"sleep_tune"},{"location":"importing/#shutdown_on_exception","text":"When this parameter is set to True, the library shutdown method is automatically called when an exception is detected, and all reporting is disabled. By setting this parameter to False, the Pico W may continue to send data to your application even after restarting it. The default is True and is recommended to be used.","title":"shutdown_on_exception"},{"location":"importing/#reset_on_shutdown","text":"When set to True (the default), this parameter will send a message to the Pico W to reset itself. After resetting, the Pico W board LED will stay lit until a connection is made with your router. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"reset_on_shutdown"},{"location":"importing2/","text":"Importing To import this package, the standard import string is: from telemetrix_rpi_pico_w_aio import telemetrix_rpi_pico_w_aio Here is an example of instantiating the library and blinking the board LED. import asyncio import sys from telemetrix_rpi_pico_w_aio import telemetrix_rpi_pico_w_aio \"\"\" Setup a pin for digital output and output a signal and toggle the pin. Do this 4 times. \"\"\" # some globals DIGITAL_PIN = 32 # Board LED pin number async def blink(my_board, pin): \"\"\" This function toggles a digital pin four times and then exits. :param my_board: telemetrix instance :param pin: pin to be controlled \"\"\" # set the pin mode await my_board.set_pin_mode_digital_output(pin) # toggle the pin 4 times and exit for x in range(4): print('ON') await my_board.digital_write(pin, 0) await asyncio.sleep(1) print('OFF') await my_board.digital_write(pin, 1) await asyncio.sleep(1) # get the event loop loop = asyncio.new_event_loop() asyncio.set_event_loop(loop) # instantiate telemetrix_rpi_pico_w_aio board = telemetrix_rpi_pico_w_aio.TelemetrixRpiPicoWAio(ip_address='192.168.2.102') try: # start the main function loop.run_until_complete(blink(board, DIGITAL_PIN)) loop.run_until_complete(board.shutdown()) except KeyboardInterrupt: loop.run_until_complete(board.shutdown()) sys.exit(0) To exit your application cleanly, you should always call the shutdown method. The __init__ Method For most applications, when instantiating the library, you can accept all the default parameters, but you must supply the IP address assigned to the Pico W server. board = telemetrix_rpi_pico_w_aio.TelemetrixRpiPicoWAio(ip_address='192.168.2.102') However, several parameters offered by the __init__ method allow for some additional control. def __init__(self, ip_address=None, ip_port=31335, sleep_tune=0.000001, autostart=True, loop=None, shutdown_on_exception=True, reset_on_shutdown=True, close_loop_on_shutdown=True): \"\"\" :param ip_address: IP address assigned to the Pico W :param ip_port: IP Port number. :param sleep_tune: A tuning parameter (typically not changed by user) :param autostart: If you wish to call the start method within your application manually, then set this to False. :param loop: optional user-provided event-loop :param shutdown_on_exception: call shutdown before raising a RunTimeError exception, or receiving a KeyboardInterrupt exception :param reset_on_shutdown: Reset the board upon shutdown :param close_loop_on_shutdown: If true, close the loop during shutdown \"\"\" Let's take a look at these parameters. ip_address This mandatory parameter must be set to the IP address assigned to the Pico W server. ip_port The ip_port value must be the same for both the client and the Pico W server. Typically, this value is accepted as is. If you change the value from the default, you must compile a matching value in the Pico W server. sleep_tune This parameter is the sleep value expressed in seconds and is used at several strategic points in the client. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, the client sleeps for the sleep_tune period before checking again. Typically, you would accept the default value. autostart Typically, you wish to have your program start all tasks automatically, however, you may delay startup by setting this parameter to False and add your custom code before calling the start_aio method loop You may specify an asyncio loop to use. The default is to allow the system to use the default event loop. shutdown_on_exception When this parameter is set to True, the library shutdown method is automatically called when an exception is detected and all reporting is disabled. By setting this parameter to False, the Pico may continue to send data to your application even after restarting it. The default is True and is recommended to be used. reset_on_shutdown When set to True (the default), this parameter will send a message to the Pico to reset itself. After resetting, the Pico board LED will flash twice, indicating the Pico has been reset. close_loop_on_shutdown Typically the event loop is shutdown when the application exits. If you wish to leave event loop open, set this parameter False. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Importing The Package And Instantiating The Library"},{"location":"importing2/#importing","text":"To import this package, the standard import string is: from telemetrix_rpi_pico_w_aio import telemetrix_rpi_pico_w_aio Here is an example of instantiating the library and blinking the board LED. import asyncio import sys from telemetrix_rpi_pico_w_aio import telemetrix_rpi_pico_w_aio \"\"\" Setup a pin for digital output and output a signal and toggle the pin. Do this 4 times. \"\"\" # some globals DIGITAL_PIN = 32 # Board LED pin number async def blink(my_board, pin): \"\"\" This function toggles a digital pin four times and then exits. :param my_board: telemetrix instance :param pin: pin to be controlled \"\"\" # set the pin mode await my_board.set_pin_mode_digital_output(pin) # toggle the pin 4 times and exit for x in range(4): print('ON') await my_board.digital_write(pin, 0) await asyncio.sleep(1) print('OFF') await my_board.digital_write(pin, 1) await asyncio.sleep(1) # get the event loop loop = asyncio.new_event_loop() asyncio.set_event_loop(loop) # instantiate telemetrix_rpi_pico_w_aio board = telemetrix_rpi_pico_w_aio.TelemetrixRpiPicoWAio(ip_address='192.168.2.102') try: # start the main function loop.run_until_complete(blink(board, DIGITAL_PIN)) loop.run_until_complete(board.shutdown()) except KeyboardInterrupt: loop.run_until_complete(board.shutdown()) sys.exit(0) To exit your application cleanly, you should always call the shutdown method.","title":"Importing"},{"location":"importing2/#the-__init__-method","text":"For most applications, when instantiating the library, you can accept all the default parameters, but you must supply the IP address assigned to the Pico W server. board = telemetrix_rpi_pico_w_aio.TelemetrixRpiPicoWAio(ip_address='192.168.2.102') However, several parameters offered by the __init__ method allow for some additional control. def __init__(self, ip_address=None, ip_port=31335, sleep_tune=0.000001, autostart=True, loop=None, shutdown_on_exception=True, reset_on_shutdown=True, close_loop_on_shutdown=True): \"\"\" :param ip_address: IP address assigned to the Pico W :param ip_port: IP Port number. :param sleep_tune: A tuning parameter (typically not changed by user) :param autostart: If you wish to call the start method within your application manually, then set this to False. :param loop: optional user-provided event-loop :param shutdown_on_exception: call shutdown before raising a RunTimeError exception, or receiving a KeyboardInterrupt exception :param reset_on_shutdown: Reset the board upon shutdown :param close_loop_on_shutdown: If true, close the loop during shutdown \"\"\" Let's take a look at these parameters.","title":"The __init__ Method"},{"location":"importing2/#ip_address","text":"This mandatory parameter must be set to the IP address assigned to the Pico W server.","title":"ip_address"},{"location":"importing2/#ip_port","text":"The ip_port value must be the same for both the client and the Pico W server. Typically, this value is accepted as is. If you change the value from the default, you must compile a matching value in the Pico W server.","title":"ip_port"},{"location":"importing2/#sleep_tune","text":"This parameter is the sleep value expressed in seconds and is used at several strategic points in the client. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, the client sleeps for the sleep_tune period before checking again. Typically, you would accept the default value.","title":"sleep_tune"},{"location":"importing2/#autostart","text":"Typically, you wish to have your program start all tasks automatically, however, you may delay startup by setting this parameter to False and add your custom code before calling the start_aio method","title":"autostart"},{"location":"importing2/#loop","text":"You may specify an asyncio loop to use. The default is to allow the system to use the default event loop.","title":"loop"},{"location":"importing2/#shutdown_on_exception","text":"When this parameter is set to True, the library shutdown method is automatically called when an exception is detected and all reporting is disabled. By setting this parameter to False, the Pico may continue to send data to your application even after restarting it. The default is True and is recommended to be used.","title":"shutdown_on_exception"},{"location":"importing2/#reset_on_shutdown","text":"When set to True (the default), this parameter will send a message to the Pico to reset itself. After resetting, the Pico board LED will flash twice, indicating the Pico has been reset.","title":"reset_on_shutdown"},{"location":"importing2/#close_loop_on_shutdown","text":"Typically the event loop is shutdown when the application exits. If you wish to leave event loop open, set this parameter False. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"close_loop_on_shutdown"},{"location":"install_pico_server/","text":"Telemetrix4RpiPicoW Install the Arduino IDE on your PC. The Arduino IDE is used to fetch, compile and upload the Telemetrix4RpiPicoW server code. Install the Arduino IDE 2.0.0 on your PC. Please follow the steps on the Arduino IDE Download page. Open the Arduino IDE. Add A Download Path To the Arduino-Pico Board Library For The IDE Please follow these instructions describing the installation process using the Arduino Library Manager . Power Your Raspberry Pi Pico W Connect a USB cable to the Raspberry Pi Pico W and plug the cable into a USB port on your computer. Install The Raspberry Pi Pico W Board Library Into The IDE Click on the Select Board drop-down list, and click on Select other board and port ... The Select Other Board and Port dialog box appears. In the search box, type Pico W. Select Raspberry Pico W by clicking on the selection, and also select the USB port. Click OK . In the lower right corner, a board manager install dialog will appear. Click YES . After the board manager installs, Raspberry Pi Pico W is displayed in the board selection drop-down box, and the USB port selection is shown at the lower right. Install The Telemetrix4RpiPicoW Library Into The IDE Click on the Library Manager icon on the left side of the IDE. Type Telemetrix4RpiPicoW in the search box and then click INSTALL . Click on INSTALL ALL to install dependencies. Select File/Examples from the IDE main menu. Scroll down, and select Telemetrix4RpiPicoW Edit The Source Code For Your Network SSID and Password Modify the file by replacing YOUR_SSID with the SSID of your network and replacing YOUR_PASSWORD with your network password. Be sure to include the quotation marks. After making your changes, click on File/Save. Compile and Upload Telemetrix4RpiPicoW Click on the Upload button in the upper left of the IDE to compile and install the server. If you get an error message similar to the one below, click on Tools/Port, select your USB port, and click on Upload again. Retrieving The IP Address Assigned To The Raspberry Pi Pico W By The Router After compiling and uploading, the Green Board LED will light up for approximately 15 seconds. The LED is automatically turned off when a successful connection is made with your router. If you are using DHCP to have your router select the IP address, you can view the assigned IP address using your router's administration Web Page and find an entry named Telemetrix_pico_w. You may also use the Arduino IDE Serial Monitor to view the IP address assigned. Because the Arduino IDE disconnects the USB port after an upload, we need to extend the startup delay in Telemetrix4RpiPicoW from 0.5 seconds to a larger number to allow both the selection of the USB port and to be able to start the Serial Monitor before the connection is made. To do this, we need to modify an additional line of code. Here the startup delay was extended from the original 0.5 seconds to 10 seconds by setting the delay value to 10000. Save and upload again. Repower the Pico W, select the USB port by going into Tools/Port and open the Serial Monitor by clicking on the Serial Monitor button. In 15 seconds, you should see the IP address displayed in the Serial Monitor when the delay expires. Write down the assigned IP address, set the delay to 500, and save and upload again. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Installing And Upgrading The Pico Server Application"},{"location":"install_pico_server/#telemetrix4rpipicow","text":"","title":"Telemetrix4RpiPicoW"},{"location":"install_pico_server/#install-the-arduino-ide-on-your-pc","text":"The Arduino IDE is used to fetch, compile and upload the Telemetrix4RpiPicoW server code. Install the Arduino IDE 2.0.0 on your PC. Please follow the steps on the Arduino IDE Download page. Open the Arduino IDE.","title":"Install the Arduino IDE on your PC."},{"location":"install_pico_server/#add-a-download-path-to-the-arduino-pico-board-library-for-the-ide","text":"Please follow these instructions describing the installation process using the Arduino Library Manager .","title":"Add A Download Path To the Arduino-Pico Board Library For The IDE"},{"location":"install_pico_server/#power-your-raspberry-pi-pico-w","text":"Connect a USB cable to the Raspberry Pi Pico W and plug the cable into a USB port on your computer.","title":"Power Your Raspberry Pi Pico W"},{"location":"install_pico_server/#install-the-raspberry-pi-pico-w-board-library-into-the-ide","text":"Click on the Select Board drop-down list, and click on Select other board and port ... The Select Other Board and Port dialog box appears. In the search box, type Pico W. Select Raspberry Pico W by clicking on the selection, and also select the USB port. Click OK . In the lower right corner, a board manager install dialog will appear. Click YES . After the board manager installs, Raspberry Pi Pico W is displayed in the board selection drop-down box, and the USB port selection is shown at the lower right.","title":"Install The Raspberry Pi Pico W Board Library Into The IDE"},{"location":"install_pico_server/#install-the-telemetrix4rpipicow-library-into-the-ide","text":"Click on the Library Manager icon on the left side of the IDE. Type Telemetrix4RpiPicoW in the search box and then click INSTALL . Click on INSTALL ALL to install dependencies. Select File/Examples from the IDE main menu. Scroll down, and select Telemetrix4RpiPicoW","title":"Install The Telemetrix4RpiPicoW Library Into The IDE"},{"location":"install_pico_server/#edit-the-source-code-for-your-network-ssid-and-password","text":"Modify the file by replacing YOUR_SSID with the SSID of your network and replacing YOUR_PASSWORD with your network password. Be sure to include the quotation marks. After making your changes, click on File/Save.","title":"Edit The Source Code For Your Network SSID and Password"},{"location":"install_pico_server/#compile-and-upload-telemetrix4rpipicow","text":"Click on the Upload button in the upper left of the IDE to compile and install the server. If you get an error message similar to the one below, click on Tools/Port, select your USB port, and click on Upload again.","title":"Compile and Upload Telemetrix4RpiPicoW"},{"location":"install_pico_server/#retrieving-the-ip-address-assigned-to-the-raspberry-pi-pico-w-by-the-router","text":"After compiling and uploading, the Green Board LED will light up for approximately 15 seconds. The LED is automatically turned off when a successful connection is made with your router. If you are using DHCP to have your router select the IP address, you can view the assigned IP address using your router's administration Web Page and find an entry named Telemetrix_pico_w. You may also use the Arduino IDE Serial Monitor to view the IP address assigned. Because the Arduino IDE disconnects the USB port after an upload, we need to extend the startup delay in Telemetrix4RpiPicoW from 0.5 seconds to a larger number to allow both the selection of the USB port and to be able to start the Serial Monitor before the connection is made. To do this, we need to modify an additional line of code. Here the startup delay was extended from the original 0.5 seconds to 10 seconds by setting the delay value to 10000. Save and upload again. Repower the Pico W, select the USB port by going into Tools/Port and open the Serial Monitor by clicking on the Serial Monitor button. In 15 seconds, you should see the IP address displayed in the Serial Monitor when the delay expires. Write down the assigned IP address, set the delay to 500, and save and upload again. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Retrieving The IP Address Assigned To The Raspberry Pi Pico W By The Router"},{"location":"install_telemetrix/","text":"Before You Install Verify your Python3 Version before installing. Installing The Telemetrix-RPi-Pico Client To install the _telemetrix-rpi-pico_w client API library, open a terminal window and type: For Linux and macOS: pip3 install telemetrix-rpi-pico-w For Windows: pip install telemetrix-rpi-pico-w Upgrading Telemetrix-RPi-Pico from a previously installed version For Linux and macOS: pip3 install telemetrix-rpi-pico --upgrade For Windows: pip install telemetrix-rpi-pico --upgrade NOTE: Both the threading and asyncio APIs are installed with a single pip command. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Installing And Upgrading The Client API On Your PC"},{"location":"install_telemetrix/#before-you-install","text":"Verify your Python3 Version before installing.","title":"Before You Install"},{"location":"install_telemetrix/#installing-the-telemetrix-rpi-pico-client","text":"To install the _telemetrix-rpi-pico_w client API library, open a terminal window and type: For Linux and macOS: pip3 install telemetrix-rpi-pico-w For Windows: pip install telemetrix-rpi-pico-w","title":"Installing The Telemetrix-RPi-Pico Client"},{"location":"install_telemetrix/#upgrading-telemetrix-rpi-pico-from-a-previously-installed-version","text":"For Linux and macOS: pip3 install telemetrix-rpi-pico --upgrade For Windows: pip install telemetrix-rpi-pico --upgrade NOTE: Both the threading and asyncio APIs are installed with a single pip command. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Upgrading Telemetrix-RPi-Pico from a previously installed version"},{"location":"license/","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"License"},{"location":"license/#gnu-affero-general-public-license","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU AFFERO GENERAL PUBLIC LICENSE"},{"location":"license/#preamble","text":"The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"license/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"license/#0-definitions","text":"\"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"license/#1-source-code","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"license/#7-additional-terms","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"license/#11-patents","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","text":"Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.","title":"13. Remote Network Interaction; Use with the GNU General Public License."},{"location":"license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"How to Apply These Terms to Your New Programs"},{"location":"management/","text":"Cleanly Shutting Down shutdown You should always call the shutdown method to exit your application cleanly and ensure that any streaming data coming from the Pico is halted. def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Example: All the examples call shutdown. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Shutting Down"},{"location":"management/#cleanly-shutting-down","text":"","title":"Cleanly Shutting Down"},{"location":"management/#shutdown","text":"You should always call the shutdown method to exit your application cleanly and ensure that any streaming data coming from the Pico is halted. def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored.","title":"shutdown"},{"location":"management/#example-all-the-examples-call-shutdown","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: All the examples call shutdown."},{"location":"management2/","text":"Cleanly Shutting Down shutdown You should always call the shutdown method to exit your application cleanly and ensure that any streaming data coming from the Pico is halted. async def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Example: All the examples call shutdown. reset_board async def reset_board(self) Send a command to the Pico to perform a hardware reset Example: All the examples call shutdown. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Shutting Down"},{"location":"management2/#cleanly-shutting-down","text":"","title":"Cleanly Shutting Down"},{"location":"management2/#shutdown","text":"You should always call the shutdown method to exit your application cleanly and ensure that any streaming data coming from the Pico is halted. async def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored.","title":"shutdown"},{"location":"management2/#example-all-the-examples-call-shutdown","text":"","title":"Example: All the examples call shutdown."},{"location":"management2/#reset_board","text":"async def reset_board(self) Send a command to the Pico to perform a hardware reset","title":"reset_board"},{"location":"management2/#example-all-the-examples-call-shutdown_1","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: All the examples call shutdown."},{"location":"neopixel/","text":"set_pin_mode_neopixel def set_pin_mode_neopixel(self, pin_number=28, num_pixels=8, fill_r=0, fill_g=0, fill_b=0) Initialize the pico for NeoPixel control. Fill with rgb values specified. Default: Set all the pixels to off. :param pin_number: neopixel GPIO control pin :param num_pixels: number of pixels in the strip :param fill_r: initial red fill value 0-255 :param fill_g: initial green fill value 0-255 :param fill_b: initial blue fill value 0-255 This method establishes the GPIO pin number for NeoPixel control, the number of LEDs in the strip, and the optional fill color. All LEDs will be set to the specified fill color. By default, all LEDs are turned off. neo_pixel_set_value def neo_pixel_set_value(self, pixel_number, r=0, g=0, b=0, auto_show=False) Set the selected pixel in the pixel array on the Pico to the value provided. :param pixel_number: pixel number :param r: red value 0-255 :param g: green value 0-255 :param b: blue value 0-255 :param auto_show: call show automatically This method is used to set the RGB values of the specified LED in the string. You may display the request immediately by setting auto_show to True. Otherwise, the change for all LEDs will display when neo_pixel_show is called. neopixel_clear def neopixel_clear(self, auto_show=True) Clear all pixels :param auto_show: call show automatically This method turns all LEDs off. You may delay the action until neopixel_show is called by setting auto_show to False. neopixel_fill def neopixel_fill(self, r=0, g=0, b=0, auto_show=True) Fill all pixels with specified value :param r: 0-255 :param g: 0-255 :param b: 0-255 :param auto_show: call show automatically This method sets all the LEDs in the string to the same color. You may delay the action until neopixel_show is called by setting auto_show to False. neopixel_show def neopixel_show(self) Write the NeoPixel buffer stored in the Pico to the NeoPixel strip. This method is used to display color updates for all LEDs. Example: neopixels.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"NeoPixel Methods"},{"location":"neopixel/#set_pin_mode_neopixel","text":"def set_pin_mode_neopixel(self, pin_number=28, num_pixels=8, fill_r=0, fill_g=0, fill_b=0) Initialize the pico for NeoPixel control. Fill with rgb values specified. Default: Set all the pixels to off. :param pin_number: neopixel GPIO control pin :param num_pixels: number of pixels in the strip :param fill_r: initial red fill value 0-255 :param fill_g: initial green fill value 0-255 :param fill_b: initial blue fill value 0-255 This method establishes the GPIO pin number for NeoPixel control, the number of LEDs in the strip, and the optional fill color. All LEDs will be set to the specified fill color. By default, all LEDs are turned off.","title":"set_pin_mode_neopixel"},{"location":"neopixel/#neo_pixel_set_value","text":"def neo_pixel_set_value(self, pixel_number, r=0, g=0, b=0, auto_show=False) Set the selected pixel in the pixel array on the Pico to the value provided. :param pixel_number: pixel number :param r: red value 0-255 :param g: green value 0-255 :param b: blue value 0-255 :param auto_show: call show automatically This method is used to set the RGB values of the specified LED in the string. You may display the request immediately by setting auto_show to True. Otherwise, the change for all LEDs will display when neo_pixel_show is called.","title":"neo_pixel_set_value"},{"location":"neopixel/#neopixel_clear","text":"def neopixel_clear(self, auto_show=True) Clear all pixels :param auto_show: call show automatically This method turns all LEDs off. You may delay the action until neopixel_show is called by setting auto_show to False.","title":"neopixel_clear"},{"location":"neopixel/#neopixel_fill","text":"def neopixel_fill(self, r=0, g=0, b=0, auto_show=True) Fill all pixels with specified value :param r: 0-255 :param g: 0-255 :param b: 0-255 :param auto_show: call show automatically This method sets all the LEDs in the string to the same color. You may delay the action until neopixel_show is called by setting auto_show to False.","title":"neopixel_fill"},{"location":"neopixel/#neopixel_show","text":"def neopixel_show(self) Write the NeoPixel buffer stored in the Pico to the NeoPixel strip. This method is used to display color updates for all LEDs.","title":"neopixel_show"},{"location":"neopixel/#example-neopixelspy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: neopixels.py"},{"location":"neopixel2/","text":"set_pin_mode_neopixel async def set_pin_mode_neopixel(self, pin_number=28, num_pixels=8, fill_r=0, fill_g=0, fill_b=0) Initialize the pico for NeoPixel control. Fill with rgb values specified. Default: Set all the pixels to off. :param pin_number: neopixel GPIO control pin :param num_pixels: number of pixels in the strip :param fill_r: initial red fill value 0-255 :param fill_g: initial green fill value 0-255 :param fill_b: initial blue fill value 0-255 This method establishes the GPIO pin number for NeoPixel control, the number of LEDs in the strip, and the optional fill color. All LEDs will be set to the specified fill color. By default, all LEDs are turned off. neo_pixel_set_value async def neo_pixel_set_value(self, pixel_number, r=0, g=0, b=0, auto_show=False) Set the selected pixel in the pixel array on the Pico to the value provided. :param pixel_number: pixel number :param r: red value 0-255 :param g: green value 0-255 :param b: blue value 0-255 :param auto_show: call show automatically This method is used to set the RGB values of the specified LED in the string. You may display the request immediately by setting auto_show to True. Otherwise, the change for all LEDs will display when neo_pixel_show is called. neopixel_clear async def neopixel_clear(self, auto_show=True) Clear all pixels :param auto_show: call show automatically This method turns all LEDs off. You may delay the action until neopixel_show is called by setting auto_show to False. neopixel_fill async def neopixel_fill(self, r=0, g=0, b=0, auto_show=True) Fill all pixels with specified value :param r: 0-255 :param g: 0-255 :param b: 0-255 :param auto_show: call show automatically This method sets all the LEDs in the string to the same color. You may delay the action until neopixel_show is called by setting auto_show to False. neopixel_show async def neopixel_show(self) Write the NeoPixel buffer stored in the Pico to the NeoPixel strip. This method is used to display color updates for all LEDs. Example: neopixels_aio.py Copyright (C) 2021 Alan Yorinks. All Rights Reserved.","title":"NeoPixel Methods"},{"location":"neopixel2/#set_pin_mode_neopixel","text":"async def set_pin_mode_neopixel(self, pin_number=28, num_pixels=8, fill_r=0, fill_g=0, fill_b=0) Initialize the pico for NeoPixel control. Fill with rgb values specified. Default: Set all the pixels to off. :param pin_number: neopixel GPIO control pin :param num_pixels: number of pixels in the strip :param fill_r: initial red fill value 0-255 :param fill_g: initial green fill value 0-255 :param fill_b: initial blue fill value 0-255 This method establishes the GPIO pin number for NeoPixel control, the number of LEDs in the strip, and the optional fill color. All LEDs will be set to the specified fill color. By default, all LEDs are turned off.","title":"set_pin_mode_neopixel"},{"location":"neopixel2/#neo_pixel_set_value","text":"async def neo_pixel_set_value(self, pixel_number, r=0, g=0, b=0, auto_show=False) Set the selected pixel in the pixel array on the Pico to the value provided. :param pixel_number: pixel number :param r: red value 0-255 :param g: green value 0-255 :param b: blue value 0-255 :param auto_show: call show automatically This method is used to set the RGB values of the specified LED in the string. You may display the request immediately by setting auto_show to True. Otherwise, the change for all LEDs will display when neo_pixel_show is called.","title":"neo_pixel_set_value"},{"location":"neopixel2/#neopixel_clear","text":"async def neopixel_clear(self, auto_show=True) Clear all pixels :param auto_show: call show automatically This method turns all LEDs off. You may delay the action until neopixel_show is called by setting auto_show to False.","title":"neopixel_clear"},{"location":"neopixel2/#neopixel_fill","text":"async def neopixel_fill(self, r=0, g=0, b=0, auto_show=True) Fill all pixels with specified value :param r: 0-255 :param g: 0-255 :param b: 0-255 :param auto_show: call show automatically This method sets all the LEDs in the string to the same color. You may delay the action until neopixel_show is called by setting auto_show to False.","title":"neopixel_fill"},{"location":"neopixel2/#neopixel_show","text":"async def neopixel_show(self) Write the NeoPixel buffer stored in the Pico to the NeoPixel strip. This method is used to display color updates for all LEDs.","title":"neopixel_show"},{"location":"neopixel2/#example-neopixels_aiopy","text":"Copyright (C) 2021 Alan Yorinks. All Rights Reserved.","title":"Example: neopixels_aio.py"},{"location":"pwm/","text":"set_pin_mode_pwm_output def set_pin_mode_pwm_output(self, pin_number): \"\"\" Enable a pin as a PWM pin. Maximum number of PWMs is 16. The frequency is fixed at 50 hz. Note: There are up to 16 pins that can be assigned as PWM. Servo pins share the 16 PWM pins. :param pin_number: pico GPIO pin number The Pico allows up to 16 GPIO pins to be assigned as PWM outputs. NOTE: Servo assigned pins are a special case of PWM so they share in the 16 pins. pwm_write def pwm_write(self, pin, duty_cycle=0, raw=False) Set the specified pin to the specified value. :param pin: pico GPIO pin number :param duty_cycle: if the raw parameter is False, then this is expressed as a percentage between 0 and 100 if the raw parameter is True, then the valid range of values is from 0 - 19999 :param raw: Sets how the duty-cycle parameter is perceived. Example: fade.py NOTE : The BoardLED cannot be controlled via PWM for the Pico W. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"PWM Methods"},{"location":"pwm/#set_pin_mode_pwm_output","text":"def set_pin_mode_pwm_output(self, pin_number): \"\"\" Enable a pin as a PWM pin. Maximum number of PWMs is 16. The frequency is fixed at 50 hz. Note: There are up to 16 pins that can be assigned as PWM. Servo pins share the 16 PWM pins. :param pin_number: pico GPIO pin number The Pico allows up to 16 GPIO pins to be assigned as PWM outputs. NOTE: Servo assigned pins are a special case of PWM so they share in the 16 pins.","title":"set_pin_mode_pwm_output"},{"location":"pwm/#pwm_write","text":"def pwm_write(self, pin, duty_cycle=0, raw=False) Set the specified pin to the specified value. :param pin: pico GPIO pin number :param duty_cycle: if the raw parameter is False, then this is expressed as a percentage between 0 and 100 if the raw parameter is True, then the valid range of values is from 0 - 19999 :param raw: Sets how the duty-cycle parameter is perceived.","title":"pwm_write"},{"location":"pwm/#example-fadepy","text":"NOTE : The BoardLED cannot be controlled via PWM for the Pico W. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: fade.py"},{"location":"pwm2/","text":"set_pin_mode_pwm_output async def set_pin_mode_pwm_output(self, pin_number): \"\"\" Enable a pin as a PWM pin. Maximum number of PWMs is 16. The frequency is fixed at 50 hz. Note: There are up to 16 pins that can be assigned as PWM. Servo pins share the 16 PWM pins. :param pin_number: pico GPIO pin number The Pico allows up to 16 GPIO pins to be assigned as PWM outputs. NOTE: Servo assigned pins are a special case of PWM so they share in the 16 pins. pwm_write async def pwm_write(self, pin, duty_cycle=0, raw=False) Set the specified pin to the specified value. :param pin: pico GPIO pin number :param duty_cycle: if the raw parameter is False, then this is expressed as a percentage between 0 and 100 if the raw parameter is True, then the valid range of values is from 0 - 19999 :param raw: Sets how the duty-cycle parameter is perceived. Example: fade_aio.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"PWM Methods"},{"location":"pwm2/#set_pin_mode_pwm_output","text":"async def set_pin_mode_pwm_output(self, pin_number): \"\"\" Enable a pin as a PWM pin. Maximum number of PWMs is 16. The frequency is fixed at 50 hz. Note: There are up to 16 pins that can be assigned as PWM. Servo pins share the 16 PWM pins. :param pin_number: pico GPIO pin number The Pico allows up to 16 GPIO pins to be assigned as PWM outputs. NOTE: Servo assigned pins are a special case of PWM so they share in the 16 pins.","title":"set_pin_mode_pwm_output"},{"location":"pwm2/#pwm_write","text":"async def pwm_write(self, pin, duty_cycle=0, raw=False) Set the specified pin to the specified value. :param pin: pico GPIO pin number :param duty_cycle: if the raw parameter is False, then this is expressed as a percentage between 0 and 100 if the raw parameter is True, then the valid range of values is from 0 - 19999 :param raw: Sets how the duty-cycle parameter is perceived.","title":"pwm_write"},{"location":"pwm2/#example-fade_aiopy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: fade_aio.py"},{"location":"python_3_verify/","text":"Verifying The Python Version Python 3.7 or greater is required before installing and running this package. To check that you have the correct version of Python 3 installed, open a command window and type: python3 -V For Windows, you may need to type: python -V Executing this command displays the current version of Python 3 installed. Python 3.8.6 If you need to install Python 3, refer to python.org. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Checking If You Have The Correct Version Of Python Installed"},{"location":"python_3_verify/#verifying-the-python-version","text":"Python 3.7 or greater is required before installing and running this package. To check that you have the correct version of Python 3 installed, open a command window and type: python3 -V For Windows, you may need to type: python -V Executing this command displays the current version of Python 3 installed. Python 3.8.6 If you need to install Python 3, refer to python.org. Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Verifying The Python Version"},{"location":"servo/","text":"set_pin_mode_servo def set_pin_mode_servo(self, pin_number, min_pulse=1000, max_pulse=2000) Attach a pin to a servo motor Servo mode is a specialized version of PWM Output mode. There are 16 PWM pins shared between the Servo and PWM Output modes. :param pin_number: pin :param min_pulse: minimum pulse width in microseconds :param max_pulse: maximum pulse width in microseconds NOTE: Servo-assigned pins are a special case of PWM, so they share in the maximum assignment of 16 PWM pins. servo_write def servo_write(self, pin_number, value) Write the value to the specified servo :param pin_number: GPIO pin number :param value: value between 0 and 180 degrees Example: servo.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Servo Methods"},{"location":"servo/#set_pin_mode_servo","text":"def set_pin_mode_servo(self, pin_number, min_pulse=1000, max_pulse=2000) Attach a pin to a servo motor Servo mode is a specialized version of PWM Output mode. There are 16 PWM pins shared between the Servo and PWM Output modes. :param pin_number: pin :param min_pulse: minimum pulse width in microseconds :param max_pulse: maximum pulse width in microseconds NOTE: Servo-assigned pins are a special case of PWM, so they share in the maximum assignment of 16 PWM pins.","title":"set_pin_mode_servo"},{"location":"servo/#servo_write","text":"def servo_write(self, pin_number, value) Write the value to the specified servo :param pin_number: GPIO pin number :param value: value between 0 and 180 degrees","title":"servo_write"},{"location":"servo/#example-servopy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: servo.py"},{"location":"servo2/","text":"set_pin_mode_servo async def set_pin_mode_servo(self, pin_number, min_pulse=1000, max_pulse=2000) Attach a pin to a servo motor Servo mode is a specialized version of PWM Output mode. There are 16 PWM pins shared between the Servo and PWM Output modes. :param pin_number: pin :param min_pulse: minimum pulse width in microseconds :param max_pulse: maximum pulse width in microseconds NOTE: Servo-assigned pins are a special case of PWM, so they share in the maximum assignment of 16 PWM pins. servo_write async def servo_write(self, pin_number, value) Write the value to the specified servo :param pin_number: GPIO pin number :param value: value between 0 and 180 degrees Example: servo_aio.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Servo Methods"},{"location":"servo2/#set_pin_mode_servo","text":"async def set_pin_mode_servo(self, pin_number, min_pulse=1000, max_pulse=2000) Attach a pin to a servo motor Servo mode is a specialized version of PWM Output mode. There are 16 PWM pins shared between the Servo and PWM Output modes. :param pin_number: pin :param min_pulse: minimum pulse width in microseconds :param max_pulse: maximum pulse width in microseconds NOTE: Servo-assigned pins are a special case of PWM, so they share in the maximum assignment of 16 PWM pins.","title":"set_pin_mode_servo"},{"location":"servo2/#servo_write","text":"async def servo_write(self, pin_number, value) Write the value to the specified servo :param pin_number: GPIO pin number :param value: value between 0 and 180 degrees","title":"servo_write"},{"location":"servo2/#example-servo_aiopy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: servo_aio.py"},{"location":"sonar/","text":"set_pin_mode_sonar def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None) :param trigger_pin: Sensor trigger gpio pin :param echo_pin: Sensor echo gpio pin :param callback: callback callback returns a data list: [ SONAR_DISTANCE, trigger_pin, distance_value, time_stamp] SONAR_DISTANCE = 11 A maximum of 4 HC-SR04 type devices is supported. Reporting will immediately begin when this method is invoked. Example: hc_sr04.py Example Sample Output (example modified for a single sensor): TelemetrixRpiPicoW: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 31.17 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 30.22 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"HC-SR04 Sonar Distance Sensor Methods"},{"location":"sonar/#set_pin_mode_sonar","text":"def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None) :param trigger_pin: Sensor trigger gpio pin :param echo_pin: Sensor echo gpio pin :param callback: callback callback returns a data list: [ SONAR_DISTANCE, trigger_pin, distance_value, time_stamp] SONAR_DISTANCE = 11 A maximum of 4 HC-SR04 type devices is supported. Reporting will immediately begin when this method is invoked.","title":"set_pin_mode_sonar"},{"location":"sonar/#example-hc_sr04py","text":"","title":"Example: hc_sr04.py"},{"location":"sonar/#example-sample-output-example-modified-for-a-single-sensor","text":"TelemetrixRpiPicoW: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 31.17 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 30.22 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output (example modified for a single sensor):"},{"location":"sonar2/","text":"set_pin_mode_sonar async def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None) :param trigger_pin: Sensor trigger gpio pin :param echo_pin: Sensor echo gpio pin :param callback: callback callback returns a data list: [ SONAR_DISTANCE, trigger_pin, distance_value, time_stamp] SONAR_DISTANCE = 11 A maximum of 4 HC-SR04 type devices is supported. Reporting will immediately begin when this method is invoked. Example: hc_sr04_aio.py Example Sample Output (example modified for a single sensor): TelemetrixRpiPicoWAio: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. O 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 31.17 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 30.22 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"HC-SR04 Sonar Distance Sensor Methods"},{"location":"sonar2/#set_pin_mode_sonar","text":"async def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None) :param trigger_pin: Sensor trigger gpio pin :param echo_pin: Sensor echo gpio pin :param callback: callback callback returns a data list: [ SONAR_DISTANCE, trigger_pin, distance_value, time_stamp] SONAR_DISTANCE = 11 A maximum of 4 HC-SR04 type devices is supported. Reporting will immediately begin when this method is invoked.","title":"set_pin_mode_sonar"},{"location":"sonar2/#example-hc_sr04_aiopy","text":"","title":"Example: hc_sr04_aio.py"},{"location":"sonar2/#example-sample-output-example-modified-for-a-single-sensor","text":"TelemetrixRpiPicoWAio: Version 1.0 Copyright (c) 2022 Alan Yorinks All Rights Reserved. O 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 32.06 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 31.17 2021-05-04 17:18:52 Trigger Pin:: 16 Distance(cm): 30.22 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example Sample Output (example modified for a single sensor):"},{"location":"spi/","text":"These methods are not specific to a given spi device but instead allow you to control any spi device by implementing the device's protocol as specified by the manufacturer's datasheet. set_pin_mode_spi def set_pin_mode_spi(self, spi_port=0, miso=16, mosi=19, clock_pin=18, clk_frequency=500000, chip_select_list=None, qualify_pins=True): \"\"\" Specify the SPI port, SPI pins, clock frequency and an optional list of chip select pins. The SPI port is configured as a \"master\". :param spi_port: 0 = spi0, 1 = spi1 :param miso: SPI data receive pin :param mosi: SPI data transmit pin :param clock_pin: clock pin :param clk_frequency: clock frequency in Hz. :param chip_select_list: this is a list of pins to be used for chip select. The pins will be configured as output, and set to high ready to be used for chip select. NOTE: You must specify the chips select pins here! cammand message: [command, spi port, mosi, miso, clock, freq msb, freq 3, freq 2, freq 1, number of cs pins, cs pins...] \"\"\" This method must be called before calling any other spi method. You may choose to use the \"standard\" MOSI, MISO, and Clock pins as listed above. All chip select pins for the select SPI port are specified when calling this method. spi_read_blocking def spi_read_blocking(self, number_of_bytes, spi_port=0, call_back=None, repeated_tx_data=0) Read the specified number of bytes from the specified SPI port and call the callback function with the reported data. :param number_of_bytes: Number of bytes to read :param spi_port: SPI port 0 or 1 :param call_back: Required callback function to report spi data as a result of read command :param repeated_tx_data: repeated data to send callback returns a data list: [SPI_READ_REPORT, spi_port, count of data bytes, data bytes, time-stamp] SPI_READ_REPORT = 13 This method retrieves the requested number of bytes and returns the result within the specified callback method. The callback argument is not optional and must be specified. spi_write_blocking def spi_write_blocking(self, bytes_to_write, spi_port=0) Write a list of bytes to the SPI device. :param bytes_to_write: A list of bytes to write. This must be in the form of a list. :param spi_port: SPI port 0 or 1 This method writes a list of bytes to the specified SPI port. Example: spi_bme280.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"SPI Methods"},{"location":"spi/#set_pin_mode_spi","text":"def set_pin_mode_spi(self, spi_port=0, miso=16, mosi=19, clock_pin=18, clk_frequency=500000, chip_select_list=None, qualify_pins=True): \"\"\" Specify the SPI port, SPI pins, clock frequency and an optional list of chip select pins. The SPI port is configured as a \"master\". :param spi_port: 0 = spi0, 1 = spi1 :param miso: SPI data receive pin :param mosi: SPI data transmit pin :param clock_pin: clock pin :param clk_frequency: clock frequency in Hz. :param chip_select_list: this is a list of pins to be used for chip select. The pins will be configured as output, and set to high ready to be used for chip select. NOTE: You must specify the chips select pins here! cammand message: [command, spi port, mosi, miso, clock, freq msb, freq 3, freq 2, freq 1, number of cs pins, cs pins...] \"\"\" This method must be called before calling any other spi method. You may choose to use the \"standard\" MOSI, MISO, and Clock pins as listed above. All chip select pins for the select SPI port are specified when calling this method.","title":"set_pin_mode_spi"},{"location":"spi/#spi_read_blocking","text":"def spi_read_blocking(self, number_of_bytes, spi_port=0, call_back=None, repeated_tx_data=0) Read the specified number of bytes from the specified SPI port and call the callback function with the reported data. :param number_of_bytes: Number of bytes to read :param spi_port: SPI port 0 or 1 :param call_back: Required callback function to report spi data as a result of read command :param repeated_tx_data: repeated data to send callback returns a data list: [SPI_READ_REPORT, spi_port, count of data bytes, data bytes, time-stamp] SPI_READ_REPORT = 13 This method retrieves the requested number of bytes and returns the result within the specified callback method. The callback argument is not optional and must be specified.","title":"spi_read_blocking"},{"location":"spi/#spi_write_blocking","text":"def spi_write_blocking(self, bytes_to_write, spi_port=0) Write a list of bytes to the SPI device. :param bytes_to_write: A list of bytes to write. This must be in the form of a list. :param spi_port: SPI port 0 or 1 This method writes a list of bytes to the specified SPI port.","title":"spi_write_blocking"},{"location":"spi/#example-spi_bme280py","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: spi_bme280.py"},{"location":"spi2/","text":"These methods are not specific to a given spi device but instead allow you to control any spi device by implementing the device's protocol as specified by the manufacturer's datasheet. set_pin_mode_spi async def set_pin_mode_spi(self, spi_port=0, miso=16, mosi=19, clock_pin=18, clk_frequency=500000, chip_select_list=None) Specify the SPI port, SPI pins, clock frequency and an optional list of chip select pins. The SPI port is configured as a \"master\". :param spi_port: 0 = spi0, 1 = spi1 :param miso: SPI data receive pin :param mosi: SPI data transmit pin (19 for :param clock_pin: clock pin :param clk_frequency: clock frequency in Hz. :param chip_select_list: this is a list of pins to be used for chip select. The pins will be configured as output, and set to high ready to be used for chip select. NOTE: You must specify the chips select pins here! command message: [command, spi port, mosi, miso, clock, freq msb, freq 3, freq 2, freq 1, number of cs pins, cs pins\u2026] This method must be called before calling any other spi method. You may choose to use the \"standard\" MOSI, MISO, and Clock pins as listed above, or if you wish to use a different set of pins, set qualify_pins to False. All chip select pins for the select SPI port are specified when calling this method. spi_read_blocking async def spi_read_blocking(self, number_of_bytes, spi_port=0, call_back=None, repeated_tx_data=0): \"\"\" Read the specified number of bytes from the specified SPI port and call the callback function with the reported data. :param number_of_bytes: Number of bytes to read :param spi_port: SPI port 0 or 1 :param call_back: Required callback function to report spi data as a result of read command :param repeated_tx_data: repeated data to send callback returns a data list: [SPI_READ_REPORT, spi_port, count of data bytes, data bytes, time-stamp] SPI_READ_REPORT = 13 \"\"\" This method retrieves the requested number of bytes and returns the result within the specified callback method. The callback argument is not optional and must be specified. spi_write_blocking async def spi_write_blocking(self, bytes_to_write, spi_port=0): \"\"\" Write a list of bytes to the SPI device. :param bytes_to_write: A list of bytes to write. This must be in the form of a list. :param spi_port: SPI port 0 or 1 \"\"\" This method writes a list of bytes to the specified SPI port. Example: spi_bme280_aio.py Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"SPI Methods"},{"location":"spi2/#set_pin_mode_spi","text":"async def set_pin_mode_spi(self, spi_port=0, miso=16, mosi=19, clock_pin=18, clk_frequency=500000, chip_select_list=None) Specify the SPI port, SPI pins, clock frequency and an optional list of chip select pins. The SPI port is configured as a \"master\". :param spi_port: 0 = spi0, 1 = spi1 :param miso: SPI data receive pin :param mosi: SPI data transmit pin (19 for :param clock_pin: clock pin :param clk_frequency: clock frequency in Hz. :param chip_select_list: this is a list of pins to be used for chip select. The pins will be configured as output, and set to high ready to be used for chip select. NOTE: You must specify the chips select pins here! command message: [command, spi port, mosi, miso, clock, freq msb, freq 3, freq 2, freq 1, number of cs pins, cs pins\u2026] This method must be called before calling any other spi method. You may choose to use the \"standard\" MOSI, MISO, and Clock pins as listed above, or if you wish to use a different set of pins, set qualify_pins to False. All chip select pins for the select SPI port are specified when calling this method.","title":"set_pin_mode_spi"},{"location":"spi2/#spi_read_blocking","text":"async def spi_read_blocking(self, number_of_bytes, spi_port=0, call_back=None, repeated_tx_data=0): \"\"\" Read the specified number of bytes from the specified SPI port and call the callback function with the reported data. :param number_of_bytes: Number of bytes to read :param spi_port: SPI port 0 or 1 :param call_back: Required callback function to report spi data as a result of read command :param repeated_tx_data: repeated data to send callback returns a data list: [SPI_READ_REPORT, spi_port, count of data bytes, data bytes, time-stamp] SPI_READ_REPORT = 13 \"\"\" This method retrieves the requested number of bytes and returns the result within the specified callback method. The callback argument is not optional and must be specified.","title":"spi_read_blocking"},{"location":"spi2/#spi_write_blocking","text":"async def spi_write_blocking(self, bytes_to_write, spi_port=0): \"\"\" Write a list of bytes to the SPI device. :param bytes_to_write: A list of bytes to write. This must be in the form of a list. :param spi_port: SPI port 0 or 1 \"\"\" This method writes a list of bytes to the specified SPI port.","title":"spi_write_blocking"},{"location":"spi2/#example-spi_bme280_aiopy","text":"Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Example: spi_bme280_aio.py"},{"location":"stepper/","text":"The stepper motor support acts as a proxy for the AccelStepper Arduino library. stepper_is_running def stepper_is_running(self, motor_id, callback) Checks to see if the motor is currently running to a target. Callback returns True if the speed is not zero or not at the target position. :param motor_id: 0-4 :param callback: required callback function to receive report :return: The current running state returned via the callback as a list: [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp] Examples: stepper_absolute.py stepper_move def stepper_move(self, motor_id, relative_position) Set the target position relative to the current position. :param motor_id: motor id: 0 - 3 :param relative_position: The desired position relative to the current position. Negative is anticlockwise from the current position. Maximum value is 32 bits. Examples: stepper_relative.py stepper_move_to def stepper_move_to(self, motor_id, position) Set an absolution target position. If position is positive, the movement is clockwise, else it is counter-clockwise. The run() function (below) will try to move the motor (at most one step per call) from the current position to the target position set by the most recent call to this function. Caution: moveTo() also recalculates the speed for the next step. If you are trying to use constant speed movements, you should call setSpeed() after calling moveTo(). :param motor_id: motor id: 0 - 3 :param position: target position. Maximum value is 32 bits. Examples: stepper_run_speed_to_position.py stepper_run def stepper_run(self, motor_id, completion_callback=None) This method steps the selected motor based on the current speed. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_absolute.py stepper_run_speed def stepper_run_speed(self, motor_id) This method steps the selected motor based at a constant speed as set by the most recent call to stepper_set_max_speed(). The motor will run continuously. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 Examples: stepper_continuous.py stepper_run_speed_to_position def stepper_run_speed_to_position(self, motor_id, completion_callback=None) Runs the motor at the currently selected speed until the target position is reached. Does not implement accelerations. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_run_speed_to_position.py stepper_set_acceleration def stepper_set_acceleration(self, motor_id, acceleration) Sets the acceleration/deceleration rate. :param motor_id: 0 - 3 :param acceleration: The desired acceleration in steps per second per second. Must be > 0.0. This is an expensive call since it requires a square root to be calculated on the server. Dont call more often than needed. Examples: stepper_absolute.py stepper_set_max_speed def stepper_set_max_speed(self, motor_id, max_speed) Sets the maximum permitted speed. The stepper_run() function will accelerate up to the speed set by this function. Caution: the maximum speed achievable depends on your processor and clock speed. The default maxSpeed is 1 step per second. Caution: Speeds that exceed the maximum speed supported by the processor may result in non-linear accelerations and decelerations. :param motor_id: 0 - 3 :param max_speed: 1 - 1000 Examples: stepper_absolute.py stepper_set_speed def stepper_set_speed(self, motor_id, speed) Sets the desired constant speed for use with stepper_run_speed(). :param motor_id: 0 - 3 :param speed: 0 - 1000 The desired constant speed in steps per second. Positive is clockwise. Speeds of more than 1000 steps per second are unreliable. Speed accuracy depends on the Arduino crystal. Jitter depends on how frequently you call the stepper_run_speed() method. The speed will be limited by the current value of stepper_set_max_speed(). Examples: stepper_run_speed_to_position.py Additional Methods The following methods are included for AccelStepper compatibility. No examples are provided for these methods. stepper_get_current_position def stepper_get_current_position(self, motor_id, current_position_callback) Request the current motor position from the server. :param motor_id: 0 - 3 :param current_position_callback: required callback function to receive report :return: The current motor position returned via the callback as a list: [REPORT_TYPE=17, motor_id, current position in steps, time_stamp] Positive is clockwise from the 0 position. stepper_set_current_position def stepper_set_current_position(self, motor_id, position) Resets the current position of the motor, so that wherever the motor happens to be right now is considered to be the new 0 position. Useful for setting a zero position on a stepper after an initial hardware positioning move. Has the side effect of setting the current motor speed to 0. :param motor_id: 0 - 3 :param position: Position in steps. This is a 32 bit value stepper_get_distance_to_go def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback) Request the distance from the current position to the target position from the server. :param motor_id: 0 - 3 :param distance_to_go_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=15, motor_id, distance in steps, time_stamp] A positive distance is clockwise from the current position. stepper_get_target_position def stepper_get_target_position(self, motor_id, target_callback) Request the most recently set target position from the server. :param motor_id: 0 - 3 :param target_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=16, motor_id, target position in steps, time_stamp] Positive is clockwise from the 0 position. stepper_disable_outputs def stepper_disable_outputs(self, motor_id) Disable motor pin outputs by setting them all LOW. Depending on the design of your electronics this may turn off the power to the motor coils, saving power. This is useful to support Arduino low power modes: disable the outputs during sleep and then re-enable with enableOutputs() before stepping again. If the enable Pin is defined, sets it to OUTPUT mode and clears the pin to disabled. :param motor_id: 0 - 3 stepper_enable_outputs def stepper_enable_outputs(self, motor_id) Enable motor pin outputs by setting the motor pins to OUTPUT mode. If the enable Pin is defined, sets it to OUTPUT mode and sets the pin to enabled. :param motor_id: 0 - 3 stepper_get_max_speed def stepper_get_max_speed(self, motor_id) Returns the maximum speed configured for this stepper that was previously set by stepper_set_max_speed() Value is stored in the client, so no callback is required. :param motor_id: 0 - 3 :return: The currently configured maximum speed. stepper_get_speed def stepper_get_speed(self, motor_id) Returns the most recently set speed. that was previously set by stepper_set_speed(); Value is stored in the client, so no callback is required. :param motor_id: 0 - 3 stepper_set_3_pins_inverted def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False, enable=False) Sets the inversion for stepper driver pins. :param motor_id: 0 - 3 :param direction: True=inverted or False :param step: True=inverted or False :param enable: True=inverted or False stepper_set_4_pins_inverted def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False, pin2_invert=False, pin3_invert=False, pin4_invert=False, enable=False) Sets the inversion for 2, 3 and 4 wire stepper pins :param motor_id: 0 - 3 :param pin1_invert: True=inverted or False :param pin2_invert: True=inverted or False :param pin3_invert: True=inverted or False :param pin4_invert: True=inverted or False :param enable: True=inverted or False stepper_set_enable_pin def stepper_set_enable_pin(self, motor_id, pin=255) Sets the enable pin number for stepper drivers. 0xFF indicates unused (default). Otherwise, if a pin is set, the pin will be turned on when enableOutputs() is called and switched off when disableOutputs() is called. :param motor_id: 0 - 4 :param pin: 0-0xff stepper_set_min_pulse_width def stepper_set_min_pulse_width(self, motor_id, minimum_width) Sets the minimum pulse width allowed by the stepper driver. The minimum practical pulse width is approximately 20 microseconds. Times less than 20 microseconds will usually result in 20 microseconds or so. :param motor_id: 0 -3 :param minimum_width: A 16 bit unsigned value expressed in microseconds. stepper_stop def stepper_stop(self, motor_id) Sets a new target position that causes the stepper to stop as quickly as possible, using the current speed and acceleration parameters. :param motor_id: 0 - 3 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Stepper Motor Methods"},{"location":"stepper/#stepper_is_running","text":"def stepper_is_running(self, motor_id, callback) Checks to see if the motor is currently running to a target. Callback returns True if the speed is not zero or not at the target position. :param motor_id: 0-4 :param callback: required callback function to receive report :return: The current running state returned via the callback as a list: [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp] Examples: stepper_absolute.py","title":"stepper_is_running"},{"location":"stepper/#stepper_move","text":"def stepper_move(self, motor_id, relative_position) Set the target position relative to the current position. :param motor_id: motor id: 0 - 3 :param relative_position: The desired position relative to the current position. Negative is anticlockwise from the current position. Maximum value is 32 bits. Examples: stepper_relative.py","title":"stepper_move"},{"location":"stepper/#stepper_move_to","text":"def stepper_move_to(self, motor_id, position) Set an absolution target position. If position is positive, the movement is clockwise, else it is counter-clockwise. The run() function (below) will try to move the motor (at most one step per call) from the current position to the target position set by the most recent call to this function. Caution: moveTo() also recalculates the speed for the next step. If you are trying to use constant speed movements, you should call setSpeed() after calling moveTo(). :param motor_id: motor id: 0 - 3 :param position: target position. Maximum value is 32 bits. Examples: stepper_run_speed_to_position.py","title":"stepper_move_to"},{"location":"stepper/#stepper_run","text":"def stepper_run(self, motor_id, completion_callback=None) This method steps the selected motor based on the current speed. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_absolute.py","title":"stepper_run"},{"location":"stepper/#stepper_run_speed","text":"def stepper_run_speed(self, motor_id) This method steps the selected motor based at a constant speed as set by the most recent call to stepper_set_max_speed(). The motor will run continuously. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 Examples: stepper_continuous.py","title":"stepper_run_speed"},{"location":"stepper/#stepper_run_speed_to_position","text":"def stepper_run_speed_to_position(self, motor_id, completion_callback=None) Runs the motor at the currently selected speed until the target position is reached. Does not implement accelerations. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_run_speed_to_position.py","title":"stepper_run_speed_to_position"},{"location":"stepper/#stepper_set_acceleration","text":"def stepper_set_acceleration(self, motor_id, acceleration) Sets the acceleration/deceleration rate. :param motor_id: 0 - 3 :param acceleration: The desired acceleration in steps per second per second. Must be > 0.0. This is an expensive call since it requires a square root to be calculated on the server. Dont call more often than needed. Examples: stepper_absolute.py","title":"stepper_set_acceleration"},{"location":"stepper/#stepper_set_max_speed","text":"def stepper_set_max_speed(self, motor_id, max_speed) Sets the maximum permitted speed. The stepper_run() function will accelerate up to the speed set by this function. Caution: the maximum speed achievable depends on your processor and clock speed. The default maxSpeed is 1 step per second. Caution: Speeds that exceed the maximum speed supported by the processor may result in non-linear accelerations and decelerations. :param motor_id: 0 - 3 :param max_speed: 1 - 1000 Examples: stepper_absolute.py","title":"stepper_set_max_speed"},{"location":"stepper/#stepper_set_speed","text":"def stepper_set_speed(self, motor_id, speed) Sets the desired constant speed for use with stepper_run_speed(). :param motor_id: 0 - 3 :param speed: 0 - 1000 The desired constant speed in steps per second. Positive is clockwise. Speeds of more than 1000 steps per second are unreliable. Speed accuracy depends on the Arduino crystal. Jitter depends on how frequently you call the stepper_run_speed() method. The speed will be limited by the current value of stepper_set_max_speed(). Examples: stepper_run_speed_to_position.py","title":"stepper_set_speed"},{"location":"stepper/#additional-methods","text":"The following methods are included for AccelStepper compatibility. No examples are provided for these methods.","title":"Additional Methods"},{"location":"stepper/#stepper_get_current_position","text":"def stepper_get_current_position(self, motor_id, current_position_callback) Request the current motor position from the server. :param motor_id: 0 - 3 :param current_position_callback: required callback function to receive report :return: The current motor position returned via the callback as a list: [REPORT_TYPE=17, motor_id, current position in steps, time_stamp] Positive is clockwise from the 0 position.","title":"stepper_get_current_position"},{"location":"stepper/#stepper_set_current_position","text":"def stepper_set_current_position(self, motor_id, position) Resets the current position of the motor, so that wherever the motor happens to be right now is considered to be the new 0 position. Useful for setting a zero position on a stepper after an initial hardware positioning move. Has the side effect of setting the current motor speed to 0. :param motor_id: 0 - 3 :param position: Position in steps. This is a 32 bit value","title":"stepper_set_current_position"},{"location":"stepper/#stepper_get_distance_to_go","text":"def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback) Request the distance from the current position to the target position from the server. :param motor_id: 0 - 3 :param distance_to_go_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=15, motor_id, distance in steps, time_stamp] A positive distance is clockwise from the current position.","title":"stepper_get_distance_to_go"},{"location":"stepper/#stepper_get_target_position","text":"def stepper_get_target_position(self, motor_id, target_callback) Request the most recently set target position from the server. :param motor_id: 0 - 3 :param target_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=16, motor_id, target position in steps, time_stamp] Positive is clockwise from the 0 position.","title":"stepper_get_target_position"},{"location":"stepper/#stepper_disable_outputs","text":"def stepper_disable_outputs(self, motor_id) Disable motor pin outputs by setting them all LOW. Depending on the design of your electronics this may turn off the power to the motor coils, saving power. This is useful to support Arduino low power modes: disable the outputs during sleep and then re-enable with enableOutputs() before stepping again. If the enable Pin is defined, sets it to OUTPUT mode and clears the pin to disabled. :param motor_id: 0 - 3","title":"stepper_disable_outputs"},{"location":"stepper/#stepper_enable_outputs","text":"def stepper_enable_outputs(self, motor_id) Enable motor pin outputs by setting the motor pins to OUTPUT mode. If the enable Pin is defined, sets it to OUTPUT mode and sets the pin to enabled. :param motor_id: 0 - 3","title":"stepper_enable_outputs"},{"location":"stepper/#stepper_get_max_speed","text":"def stepper_get_max_speed(self, motor_id) Returns the maximum speed configured for this stepper that was previously set by stepper_set_max_speed() Value is stored in the client, so no callback is required. :param motor_id: 0 - 3 :return: The currently configured maximum speed.","title":"stepper_get_max_speed"},{"location":"stepper/#stepper_get_speed","text":"def stepper_get_speed(self, motor_id) Returns the most recently set speed. that was previously set by stepper_set_speed(); Value is stored in the client, so no callback is required. :param motor_id: 0 - 3","title":"stepper_get_speed"},{"location":"stepper/#stepper_set_3_pins_inverted","text":"def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False, enable=False) Sets the inversion for stepper driver pins. :param motor_id: 0 - 3 :param direction: True=inverted or False :param step: True=inverted or False :param enable: True=inverted or False","title":"stepper_set_3_pins_inverted"},{"location":"stepper/#stepper_set_4_pins_inverted","text":"def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False, pin2_invert=False, pin3_invert=False, pin4_invert=False, enable=False) Sets the inversion for 2, 3 and 4 wire stepper pins :param motor_id: 0 - 3 :param pin1_invert: True=inverted or False :param pin2_invert: True=inverted or False :param pin3_invert: True=inverted or False :param pin4_invert: True=inverted or False :param enable: True=inverted or False","title":"stepper_set_4_pins_inverted"},{"location":"stepper/#stepper_set_enable_pin","text":"def stepper_set_enable_pin(self, motor_id, pin=255) Sets the enable pin number for stepper drivers. 0xFF indicates unused (default). Otherwise, if a pin is set, the pin will be turned on when enableOutputs() is called and switched off when disableOutputs() is called. :param motor_id: 0 - 4 :param pin: 0-0xff","title":"stepper_set_enable_pin"},{"location":"stepper/#stepper_set_min_pulse_width","text":"def stepper_set_min_pulse_width(self, motor_id, minimum_width) Sets the minimum pulse width allowed by the stepper driver. The minimum practical pulse width is approximately 20 microseconds. Times less than 20 microseconds will usually result in 20 microseconds or so. :param motor_id: 0 -3 :param minimum_width: A 16 bit unsigned value expressed in microseconds.","title":"stepper_set_min_pulse_width"},{"location":"stepper/#stepper_stop","text":"def stepper_stop(self, motor_id) Sets a new target position that causes the stepper to stop as quickly as possible, using the current speed and acceleration parameters. :param motor_id: 0 - 3 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"stepper_stop"},{"location":"stepper2/","text":"The stepper motor support acts as a proxy for the AccelStepper Arduino library. stepper_is_running async def stepper_is_running(self, motor_id, callback) Checks to see if the motor is currently running to a target. Callback returns True if the speed is not zero or not at the target position. :param motor_id: 0-4 :param callback: required callback function to receive report :return: The current running state returned via the callback as a list: [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp] Examples: stepper_absolute_aio.py stepper_move async def stepper_move(self, motor_id, relative_position) Set the target position relative to the current position. :param motor_id: motor id: 0 - 3 :param relative_position: The desired position relative to the current position. Negative is anticlockwise from the current position. Maximum value is 32 bits. Examples: stepper_relative_aio.py stepper_move_to async def stepper_move_to(self, motor_id, position) Set an absolution target position. If position is positive, the movement is clockwise, else it is counter-clockwise. The run() function (below) will try to move the motor (at most one step per call) from the current position to the target position set by the most recent call to this function. Caution: moveTo() also recalculates the speed for the next step. If you are trying to use constant speed movements, you should call setSpeed() after calling moveTo(). :param motor_id: motor id: 0 - 3 :param position: target position. Maximum value is 32 bits. Examples: stepper_continuous_aio.py stepper_run async def stepper_run(self, motor_id, completion_callback=None) This method steps the selected motor based on the current speed. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_absolute_aio.py stepper_run_speed async def stepper_run_speed(self, motor_id) This method steps the selected motor based at a constant speed as set by the most recent call to stepper_set_max_speed(). The motor will run continuously. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 Examples: stepper_continuous_aio.py stepper_run_speed_to_position async def stepper_run_speed_to_position(self, motor_id, completion_callback=None) Runs the motor at the currently selected speed until the target position is reached. Does not implement accelerations. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_continuous_aio.py stepper_set_acceleration async def stepper_set_acceleration(self, motor_id, acceleration) Sets the acceleration/deceleration rate. :param motor_id: 0 - 3 :param acceleration: The desired acceleration in steps per second per second. Must be > 0.0. This is an expensive call since it requires a square root to be calculated on the server. Dont call more often than needed. Examples: stepper_absolute_aio.py ### stepper_set_max_speed ```python async def stepper_set_max_speed(self, motor_id, max_speed) Sets the maximum permitted speed. The stepper_run() function will accelerate up to the speed set by this function. Caution: the maximum speed achievable depends on your processor and clock speed. The default maxSpeed is 1 step per second. Caution: Speeds that exceed the maximum speed supported by the processor may result in non-linear accelerations and decelerations. :param motor_id: 0 - 3 :param max_speed: 1 - 1000 Examples: stepper_absolute_aio.py stepper_set_speed async def stepper_set_speed(self, motor_id, speed) Sets the desired constant speed for use with stepper_run_speed(). :param motor_id: 0 - 3 :param speed: 0 - 1000 The desired constant speed in steps per second. Positive is clockwise. Speeds of more than 1000 steps per second are unreliable. Speed accuracy depends on the Arduino crystal. Jitter depends on how frequently you call the stepper_run_speed() method. The speed will be limited by the current value of stepper_set_max_speed(). Examples: stepper_continuous_aio.py Additional Methods The following methods are included for AccelStepper compatibility. No examples are provided for these methods. stepper_get_current_position async def stepper_get_current_position(self, motor_id, current_position_callback) Request the current motor position from the server. :param motor_id: 0 - 3 :param current_position_callback: required callback function to receive report :return: The current motor position returned via the callback as a list: [REPORT_TYPE=17, motor_id, current position in steps, time_stamp] Positive is clockwise from the 0 position. stepper_set_current_position async def stepper_set_current_position(self, motor_id, position) Resets the current position of the motor, so that wherever the motor happens to be right now is considered to be the new 0 position. Useful for setting a zero position on a stepper after an initial hardware positioning move. Has the side effect of setting the current motor speed to 0. :param motor_id: 0 - 3 :param position: Position in steps. This is a 32 bit value stepper_get_distance_to_go async def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback) Request the distance from the current position to the target position from the server. :param motor_id: 0 - 3 :param distance_to_go_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=15, motor_id, distance in steps, time_stamp] A positive distance is clockwise from the current position. stepper_get_target_position async def stepper_get_target_position(self, motor_id, target_callback) Request the most recently set target position from the server. :param motor_id: 0 - 3 :param target_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=16, motor_id, target position in steps, time_stamp] Positive is clockwise from the 0 position. stepper_disable_outputs async def stepper_disable_outputs(self, motor_id) Disable motor pin outputs by setting them all LOW. Depending on the design of your electronics this may turn off the power to the motor coils, saving power. This is useful to support Arduino low power modes: disable the outputs during sleep and then re-enable with enableOutputs() before stepping again. If the enable Pin is defined, sets it to OUTPUT mode and clears the pin to disabled. :param motor_id: 0 - 3 stepper_enable_outputs async def stepper_enable_outputs(self, motor_id) Enable motor pin outputs by setting the motor pins to OUTPUT mode. If the enable Pin is defined, sets it to OUTPUT mode and sets the pin to enabled. :param motor_id: 0 - 3 stepper_get_max_speed async def stepper_get_max_speed(self, motor_id) Returns the maximum speed configured for this stepper that was previously set by stepper_set_max_speed() Value is stored in the client, so no callback is required. :param motor_id: 0 - 3 :return: The currently configured maximum speed. stepper_get_speed async def stepper_get_speed(self, motor_id) Returns the most recently set speed. that was previously set by stepper_set_speed(); Value is stored in the client, so no callback is required. :param motor_id: 0 - 3 stepper_set_3_pins_inverted async def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False, enable=False) Sets the inversion for stepper driver pins. :param motor_id: 0 - 3 :param direction: True=inverted or False :param step: True=inverted or False :param enable: True=inverted or False stepper_set_4_pins_inverted async def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False, pin2_invert=False, pin3_invert=False, pin4_invert=False, enable=False) Sets the inversion for 2, 3 and 4 wire stepper pins :param motor_id: 0 - 3 :param pin1_invert: True=inverted or False :param pin2_invert: True=inverted or False :param pin3_invert: True=inverted or False :param pin4_invert: True=inverted or False :param enable: True=inverted or False stepper_set_enable_pin async def stepper_set_enable_pin(self, motor_id, pin=255) Sets the enable pin number for stepper drivers. 0xFF indicates unused (default). Otherwise, if a pin is set, the pin will be turned on when enableOutputs() is called and switched off when disableOutputs() is called. :param motor_id: 0 - 4 :param pin: 0-0xff stepper_set_min_pulse_width async def stepper_set_min_pulse_width(self, motor_id, minimum_width) Sets the minimum pulse width allowed by the stepper driver. The minimum practical pulse width is approximately 20 microseconds. Times less than 20 microseconds will usually result in 20 microseconds or so. :param motor_id: 0 -3 :param minimum_width: A 16 bit unsigned value expressed in microseconds. stepper_stop async def stepper_stop(self, motor_id) Sets a new target position that causes the stepper to stop as quickly as possible, using the current speed and acceleration parameters. :param motor_id: 0 - 3 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"Stepper Motor Methods"},{"location":"stepper2/#stepper_is_running","text":"async def stepper_is_running(self, motor_id, callback) Checks to see if the motor is currently running to a target. Callback returns True if the speed is not zero or not at the target position. :param motor_id: 0-4 :param callback: required callback function to receive report :return: The current running state returned via the callback as a list: [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp] Examples: stepper_absolute_aio.py","title":"stepper_is_running"},{"location":"stepper2/#stepper_move","text":"async def stepper_move(self, motor_id, relative_position) Set the target position relative to the current position. :param motor_id: motor id: 0 - 3 :param relative_position: The desired position relative to the current position. Negative is anticlockwise from the current position. Maximum value is 32 bits. Examples: stepper_relative_aio.py","title":"stepper_move"},{"location":"stepper2/#stepper_move_to","text":"async def stepper_move_to(self, motor_id, position) Set an absolution target position. If position is positive, the movement is clockwise, else it is counter-clockwise. The run() function (below) will try to move the motor (at most one step per call) from the current position to the target position set by the most recent call to this function. Caution: moveTo() also recalculates the speed for the next step. If you are trying to use constant speed movements, you should call setSpeed() after calling moveTo(). :param motor_id: motor id: 0 - 3 :param position: target position. Maximum value is 32 bits. Examples: stepper_continuous_aio.py","title":"stepper_move_to"},{"location":"stepper2/#stepper_run","text":"async def stepper_run(self, motor_id, completion_callback=None) This method steps the selected motor based on the current speed. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_absolute_aio.py","title":"stepper_run"},{"location":"stepper2/#stepper_run_speed","text":"async def stepper_run_speed(self, motor_id) This method steps the selected motor based at a constant speed as set by the most recent call to stepper_set_max_speed(). The motor will run continuously. Once called, the server will continuously attempt to step the motor. :param motor_id: 0 - 3 Examples: stepper_continuous_aio.py","title":"stepper_run_speed"},{"location":"stepper2/#stepper_run_speed_to_position","text":"async def stepper_run_speed_to_position(self, motor_id, completion_callback=None) Runs the motor at the currently selected speed until the target position is reached. Does not implement accelerations. :param motor_id: 0 - 3 :param completion_callback: call back function to receive motion complete notification callback returns a data list: [report_type, motor_id, raw_time_stamp] The report_type = 19 Examples: stepper_continuous_aio.py","title":"stepper_run_speed_to_position"},{"location":"stepper2/#stepper_set_acceleration","text":"async def stepper_set_acceleration(self, motor_id, acceleration) Sets the acceleration/deceleration rate. :param motor_id: 0 - 3 :param acceleration: The desired acceleration in steps per second per second. Must be > 0.0. This is an expensive call since it requires a square root to be calculated on the server. Dont call more often than needed. Examples: stepper_absolute_aio.py ### stepper_set_max_speed ```python async def stepper_set_max_speed(self, motor_id, max_speed) Sets the maximum permitted speed. The stepper_run() function will accelerate up to the speed set by this function. Caution: the maximum speed achievable depends on your processor and clock speed. The default maxSpeed is 1 step per second. Caution: Speeds that exceed the maximum speed supported by the processor may result in non-linear accelerations and decelerations. :param motor_id: 0 - 3 :param max_speed: 1 - 1000 Examples: stepper_absolute_aio.py","title":"stepper_set_acceleration"},{"location":"stepper2/#stepper_set_speed","text":"async def stepper_set_speed(self, motor_id, speed) Sets the desired constant speed for use with stepper_run_speed(). :param motor_id: 0 - 3 :param speed: 0 - 1000 The desired constant speed in steps per second. Positive is clockwise. Speeds of more than 1000 steps per second are unreliable. Speed accuracy depends on the Arduino crystal. Jitter depends on how frequently you call the stepper_run_speed() method. The speed will be limited by the current value of stepper_set_max_speed(). Examples: stepper_continuous_aio.py","title":"stepper_set_speed"},{"location":"stepper2/#additional-methods","text":"The following methods are included for AccelStepper compatibility. No examples are provided for these methods.","title":"Additional Methods"},{"location":"stepper2/#stepper_get_current_position","text":"async def stepper_get_current_position(self, motor_id, current_position_callback) Request the current motor position from the server. :param motor_id: 0 - 3 :param current_position_callback: required callback function to receive report :return: The current motor position returned via the callback as a list: [REPORT_TYPE=17, motor_id, current position in steps, time_stamp] Positive is clockwise from the 0 position.","title":"stepper_get_current_position"},{"location":"stepper2/#stepper_set_current_position","text":"async def stepper_set_current_position(self, motor_id, position) Resets the current position of the motor, so that wherever the motor happens to be right now is considered to be the new 0 position. Useful for setting a zero position on a stepper after an initial hardware positioning move. Has the side effect of setting the current motor speed to 0. :param motor_id: 0 - 3 :param position: Position in steps. This is a 32 bit value","title":"stepper_set_current_position"},{"location":"stepper2/#stepper_get_distance_to_go","text":"async def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback) Request the distance from the current position to the target position from the server. :param motor_id: 0 - 3 :param distance_to_go_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=15, motor_id, distance in steps, time_stamp] A positive distance is clockwise from the current position.","title":"stepper_get_distance_to_go"},{"location":"stepper2/#stepper_get_target_position","text":"async def stepper_get_target_position(self, motor_id, target_callback) Request the most recently set target position from the server. :param motor_id: 0 - 3 :param target_callback: required callback function to receive report :return: The distance to go is returned via the callback as a list: [REPORT_TYPE=16, motor_id, target position in steps, time_stamp] Positive is clockwise from the 0 position.","title":"stepper_get_target_position"},{"location":"stepper2/#stepper_disable_outputs","text":"async def stepper_disable_outputs(self, motor_id) Disable motor pin outputs by setting them all LOW. Depending on the design of your electronics this may turn off the power to the motor coils, saving power. This is useful to support Arduino low power modes: disable the outputs during sleep and then re-enable with enableOutputs() before stepping again. If the enable Pin is defined, sets it to OUTPUT mode and clears the pin to disabled. :param motor_id: 0 - 3","title":"stepper_disable_outputs"},{"location":"stepper2/#stepper_enable_outputs","text":"async def stepper_enable_outputs(self, motor_id) Enable motor pin outputs by setting the motor pins to OUTPUT mode. If the enable Pin is defined, sets it to OUTPUT mode and sets the pin to enabled. :param motor_id: 0 - 3","title":"stepper_enable_outputs"},{"location":"stepper2/#stepper_get_max_speed","text":"async def stepper_get_max_speed(self, motor_id) Returns the maximum speed configured for this stepper that was previously set by stepper_set_max_speed() Value is stored in the client, so no callback is required. :param motor_id: 0 - 3 :return: The currently configured maximum speed.","title":"stepper_get_max_speed"},{"location":"stepper2/#stepper_get_speed","text":"async def stepper_get_speed(self, motor_id) Returns the most recently set speed. that was previously set by stepper_set_speed(); Value is stored in the client, so no callback is required. :param motor_id: 0 - 3","title":"stepper_get_speed"},{"location":"stepper2/#stepper_set_3_pins_inverted","text":"async def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False, enable=False) Sets the inversion for stepper driver pins. :param motor_id: 0 - 3 :param direction: True=inverted or False :param step: True=inverted or False :param enable: True=inverted or False","title":"stepper_set_3_pins_inverted"},{"location":"stepper2/#stepper_set_4_pins_inverted","text":"async def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False, pin2_invert=False, pin3_invert=False, pin4_invert=False, enable=False) Sets the inversion for 2, 3 and 4 wire stepper pins :param motor_id: 0 - 3 :param pin1_invert: True=inverted or False :param pin2_invert: True=inverted or False :param pin3_invert: True=inverted or False :param pin4_invert: True=inverted or False :param enable: True=inverted or False","title":"stepper_set_4_pins_inverted"},{"location":"stepper2/#stepper_set_enable_pin","text":"async def stepper_set_enable_pin(self, motor_id, pin=255) Sets the enable pin number for stepper drivers. 0xFF indicates unused (default). Otherwise, if a pin is set, the pin will be turned on when enableOutputs() is called and switched off when disableOutputs() is called. :param motor_id: 0 - 4 :param pin: 0-0xff","title":"stepper_set_enable_pin"},{"location":"stepper2/#stepper_set_min_pulse_width","text":"async def stepper_set_min_pulse_width(self, motor_id, minimum_width) Sets the minimum pulse width allowed by the stepper driver. The minimum practical pulse width is approximately 20 microseconds. Times less than 20 microseconds will usually result in 20 microseconds or so. :param motor_id: 0 -3 :param minimum_width: A 16 bit unsigned value expressed in microseconds.","title":"stepper_set_min_pulse_width"},{"location":"stepper2/#stepper_stop","text":"async def stepper_stop(self, motor_id) Sets a new target position that causes the stepper to stop as quickly as possible, using the current speed and acceleration parameters. :param motor_id: 0 - 3 Copyright (C) 2022 Alan Yorinks. All Rights Reserved.","title":"stepper_stop"}]}